var myVariable = `
{
  
  "0": {
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. . NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. . License and Sublicense Grant. . (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) &quot;Licensee Products&quot; means Licensee products that use or incorporate Microchip Products. (ii) &quot;Microchip Product&quot; means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) &quot;Object Code&quot; means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) &quot;Source Code&quot; means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) &quot;Third Party&quot; means Licensee&#39;s agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) &quot;Third Party Products&quot; means Third Party products that use or incorporate Microchip Products. . (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. . Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. . (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. . (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party&#39;s authorized use of the Software in conformance with this Section 2(d). . (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. . (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. . | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. . | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. . | Licensee’s Obligations. . (a) Licensee will ensure Third Party compliance with the terms of this Agreement. . (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. . (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. . (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. . | Confidentiality. . (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. . (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. . | Ownership of Proprietary Rights. . (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. . (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. . | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. . | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. . | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. . | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. . | General. . (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. . (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. . (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. . (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. . (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. . (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. . (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. . (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. . (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. . | If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. . Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. . License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. . Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. . THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. .",
    "url": "http://localhost:4000/bootloader_apps_i2c/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  }
  ,"1": {
    "title": "I2C Bootloader",
    "content": ". To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . I2C Bootloader . This example application shows how to use the Bootloader Library to bootload an application using I2C protocol. . Bootloader Application . This is a bootloader application which resides from starting location of the device flash memory | It uses I2C peripheral library in non-interrupt mode | It implements two tasks To process the I2C events | To perform flash read/write/verify operations | | It is implemented in non-blocking mode thereby allowing other tasks to co-exist (if any) | Trigger Methods It uses the On board Switch as bootloader trigger pin to force enter the bootloader at reset of device | It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device | . | . NVM Host Application . This is a embedded I2C host application which sends the application image stored in it’s internal flash (NVM) to the target board over the I2C bus | The user application binary must be converted to a header file containing the application image in HEX format in a C style array. A btl_bin_to_c_array.py utility is provided to do this conversion . . | Add the generated application image header file to the NVM host application project. Rebuild and program the NVM host application. This results in the application image being copied in the host MCU’s flash (NVM) | . SDCARD Host Application . This is a embedded I2C host application which sends the application image stored in the SD card to the target board over the I2C bus | The user application binary is copied into an SD card and inserted in the SD card slot on the host board . . | . Test Application . This is a test application which resides from end of bootloader size in device flash memory | It will be loaded into flash memory by bootloader application | It blinks an LED and provides console output | It uses the On board Switch to trigger the bootloader from firmware (May not be supported on all devices) Once the switch is pressed it loads first 16 bytes of RAM with bootloader request pattern (0x5048434D) and resets the device | . | . Development Kits . The following table provides links to documentation on how to build and run I2C bootloader on different development kits . Development Kit . SAM C21N Xplained Pro Evaluation Kit | . SAM D11 Xplained Pro Evaluation Kit | . SAM D20 Xplained Pro Evaluation Kit | . SAM D21 Xplained Pro Evaluation Kit | . SAM DA1 Xplained Pro Evaluation Kit | . SAM E54 Xplained Pro Evaluation Kit | . SAM HA1G16A Xplained Pro | . SAM L10 Xplained Pro Evaluation Kit | . SAM L21 Xplained Pro Evaluation Kit | . SAM L22 Xplained Pro Evaluation Kit | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/readme.html",
    "relUrl": "/apps/i2c_bootloader/readme.html"
  }
  ,"2": {
    "title": "I2C Fail Safe Bootloader",
    "content": ". To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . I2C Fail Safe Bootloader . This example application shows how to use the Bootloader Library to bootload an application on device having dual flash bank feature using I2C protocol . Bootloader Application . This is a fail safe bootloader application which resides from starting location of both the banks of device flash memory region for SAM devices with dual bank support | It uses I2C peripheral library in non-interrupt mode | It implements two tasks To process the I2C events | To perform flash read/write/verify operations | | It is implemented in non-blocking mode thereby allowing other tasks to co-exist (if any) | Trigger Methods It uses the On board Switch as bootloader trigger pin to force enter the bootloader at reset of device | It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device | . | . NVM Host Application . This is a embedded I2C host application which sends the application image stored in it’s internal flash (NVM) to the inactive bank of the target board over the I2C bus . | The user application binary must be converted to a header file containing the application image in HEX format in a C style array. A btl_bin_to_c_array.py utility is provided to do this conversion . . | To program the bootloader to the inactive flash bank, the user application binary may be combined with the bootloader using the btl_app_merge_bin.py utility. The combined binary file must be converted to a header file using the btl_bin_to_c_array.py utility . . | Add the generated image header file of the application or bootloader and application combined to the NVM host application project. Rebuild and program the NVM host application. This results in the application image being copied in the host MCU’s flash (NVM) . | . Test Application . This is a test application which resides from end of bootloader size in device flash memory | It will be loaded into flash memory by bootloader application | It blinks an LED and provides console output | It uses the On board Switch to trigger the bootloader from firmware Once the switch is pressed it loads first 16 bytes of RAM with bootloader request pattern (0x5048434D) and resets the device | . | . Development Kits . The following table provides links to documentation on how to build and run I2C Fail Safe bootloader on different development kits . Development Kit . SAM E54 Xplained Pro Evaluation Kit | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/readme.html",
    "relUrl": "/apps/i2c_fail_safe_bootloader/readme.html"
  }
  ,"3": {
    "title": "I2C WLCSP Bootloader",
    "content": ". To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . I2C WLCSP Bootloader . This example application shows how to use the Bootloader Library to bootload an application using I2C protocol. . Bootloader Application . This is a bootloader application which resides from starting location of the device flash memory | Bootloader runs from RAM to allow self-upgradation of the bootloader code itself. | Trigger Methods: By driving I2C SDA and SCL low on external reset. This assumes that the bootloader host application has control over the reset pin to ensure that execution of the bootloader starts after the values of SCL and SDA pins is settled to a desired level. | Pattern - 0x5048434D in each of the first 4 words (total 16 bytes), starting from RAM address - 0x20000000 | No valid application. Application is considered invalid if the first 4 bytes of the application (which contains the starting address for the main stack pointer) are 0xFFFFFFFF | . | Port pins used for I2C communication: PA08 (SERCOM2_PAD0) | PA09 (SERCOM2_PAD1) | . | Bootloader programs fuse settings to default values. Any custom fuse bit settings must be programmed by the application | Bootloader uses I2C peripheral library in non-interrupt mode and implements two tasks: To process the I2C events | To perform flash read/write/verify operations | | It is implemented in non-blocking mode thereby allowing other tasks to co-exist (if any) | . SDCARD Host Application . This is a embedded I2C host application which sends the application image stored in the SD card to the target board over the I2C bus | The user application binary is copied into an SD card and inserted in the SD card slot on the host board . . | . Targets . The following table provides links to documentation on how to build and run I2C WLCSP bootloader on SAMD20E15BU and SAMD20E16BU targets . Development Kit . SAMD20E15BU | . SAMD20E16BU | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/readme.html",
    "relUrl": "/apps/i2c_bootloader_wlcsp/readme.html"
  }
  ,"4": {
    "title": "I2C Bootloader Host Tools",
    "content": ". I2C Bootloader Tools Help . This document describes the usage of I2C bootloader host tools . Downloading the host tools . To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Following host tools are provided to be used with different bootloaders . Host Script Description . btl_app_merge_bin.py | Used to merge the bootloader binary and application binary | . btl_bin_to_c_array.py | Used to convert the binary file to a C style array containing Hex output | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/readme.html",
    "relUrl": "/tools/readme.html"
  }
  ,"5": {
    "title": "Bootloader and Application binary merge script",
    "content": ". Bootloader and Application binary merge script Help . This document describes the usage of btl_app_merge_bin.py host script . Downloading the host script . To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the tool in bootloader repository is tools/btl_app_merge_bin.py . Setting up the Host PC . The Script is compatible with Python 3.x For Python 2.7.x use the host scripts placed in tool_archive/. These scripts may be removed in future | . | . Description . This script should be used to merge the bootloader binary and application binary | It creates a merged binary output where bootloader is placed from start and the application will be placed at the offset passed as parameter | If the application offset is not equal to end of bootloader offset it fills the gap with 0xFF until the application offset | The merged binary can be used by btl_host.py as input for Updating bootloader and application together | The merged binary will be created in the directory from where the script was called . . | . Usage Examples . Below is the syntax to show help menu for the script . python &lt;harmony3_path&gt; bootloader tools btl_app_merge_bin.py --help . . Below is the syntax and an example on how to merge a bootloader binary and application binary . python &lt;harmony3_path&gt; bootloader tools btl_app_merge_bin.py -o &lt;Offset&gt; -b &lt;Bootloader_binary_path&gt; -a &lt;Application_binary_path&gt; . python &lt;harmony3_path&gt; bootloader tools btl_app_merge_bin.py -o 0x2000 -b &lt;harmony3_path&gt; bootloader_apps_i2c apps i2c_fail_safe_bootloader bootloader firmware sam_e54_xpro.X dist sam_e54_xpro production sam_e54_xpro.X.production.bin -a &lt;harmony3_path&gt; bootloader_apps_i2c apps i2c_fail_safe_bootloader test_app firmware sam_e54_xpro.X dist sam_e54_xpro production sam_e54_xpro.X.production.bin . .",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_app_merge_bin.html",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html"
  }
  ,"6": {
    "title": "Bootloader Binary to C Array script",
    "content": ". Bootloader Binary to C Array script help . This document describes the usage of btl_bin_to_c_array.py host script . Downloading the host script . To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the tool in bootloader repository is tools/btl_bin_to_c_array.py . Setting up the Host PC . The Script is compatible with Python 3.x | . Description . This script should be used to convert the binary file to a C style array containing Hex output that can be directly included in target application code | It is mainly used when programming the application using the host_app_nvm application in I2C Bootloader | If size of the input binary file is not aligned to device erase boundary it appends 0xFF to the binary to make it aligned and then generates the Hex output | User must specify the binary file to convert (-b), hex output file (-o) and the device (-d) . . | . Usage Examples . Below is the syntax to show help menu for the script . python &lt;harmony3_path&gt; bootloader tools btl_bin_to_c_array.py --help . . Below is the syntax and an example on how to convert the binary file to a C style array containing Hex output . python &lt;harmony3_path&gt; bootloader tools btl_bin_to_c_array.py -b &lt;binary_file&gt; -o &lt;hex_file&gt; -d &lt;device&gt; . python &lt;harmony3_path&gt; bootloader tools btl_bin_to_c_array.py -b &lt;harmony3_path&gt; bootloader_apps_i2c apps i2c_bootloader test_app firmware sam_d20_xpro.X dist sam_d20_xpro production sam_d20_xpro.X.production.bin -o &lt;harmony3_path&gt; bootloader_apps_i2c apps i2c_bootloader host_app_nvm firmware src test_app_images image_pattern_hex_sam_d20_xpro.h -d samd2x .",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_bin_to_c_array.html",
    "relUrl": "/tools/docs/readme_btl_bin_to_c_array.html"
  }
  ,"7": {
    "title": "Application Configurations",
    "content": ". Configuring an Application to be bootloaded . To bootload a SAM based application refer to SAM Application Configuration | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application.html",
    "relUrl": "/apps/docs/readme_configure_application.html"
  }
  ,"8": {
    "title": "SAM Application Configurations",
    "content": ". Configuring a SAM based Application to be bootloaded . Application Settings in MHC System Configuration . Launch MHC for the application project to be configured | Select system component from the project graph and configure the below highlighted settings . . | Disable Fuse Settings: Fuse settings needs to be disabled for the application which will be boot-loaded as the fuse settings are supposed to be programmed through programming tool from bootloader code | Also the fuse settings are not programmable through firmware | Enabling the fuse settings also increases the size of the binary when generated through the hex file | When updating the bootloader itself, make sure that the fuse settings for the bootloader application are also disabled | . | Specify the Application Start Address: Specify the Start address from where the application will run under the Application Start Address (Hex) option in System block in MHC. | This value should be equal to or greater than the bootloader size and must be aligned to the erase unit size on that device. | As this value will be used by bootloader to Jump to application at device reset it should match the value provided to bootloader code | The Application Start Address (Hex) will be used to generate XC32 compiler settings to place the code at intended address | After the project is regenerated, the ROM_ORIGIN and ROM_LENGTH are the XC32 linker variables which will be overridden with value provided for Application Start Address (Hex) and can be verified under Options for xc32-ld in Project Properties in MPLABX IDE as shown below. | . . | MPLAB X Settings . Specifying post build option to automatically generate the binary file from hex file once the build is complete The generated binary file can directly be copied on to the SD card when using host_app_sdcard host application | The generated binary file will serve as an input to the btl_bin_to_c_array.py to generate a C style array containing HEX data when the host_app_nvm host application is used | . \${MP_CC_DIR}/xc32-objcopy -I ihex -O binary \${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.hex \${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.bin . . | . Additional settings (Optional) . RAM_ORIGIN and RAM_LENGTH values should be provided for reserving configured bytes of start of RAM to trigger bootloader from firmware | Under Project Properties, expand options for xc32-ld and define the values for RAM_ORIGIN and RAM_LENGTH under Additional options | This is optional and can be ignored if not required . . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application_sam.html",
    "relUrl": "/apps/docs/readme_configure_application_sam.html"
  }
  ,"9": {
    "title": "Configuring NVM Host applications",
    "content": ". Configuring the NVM Host applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the NVM host applications within the repository are . apps/i2c_bootloader/ | apps/i2c_fail_safe_bootloader/ | apps/i2c_bootloader_wlcsp/ | . Generating Hex Image pattern used by NVM Host application . Follow below steps only when existing test_app is rebuilt or any other application is to be bootloaded . Open the application project to be bootloaded in the IDE If existing test application has to be built open test_app/firmware/*.X | . | Build the application project to generate the binary (Do not program the binary) . | Convert the generated binary (.bin file) to a header file containing the image data in a C style array: On a Windows machine, open the command prompt and launch the btl_bin_to_c_array.py utility to generate a header file containing the image data in an array . python &lt;harmony3_path&gt; bootloader tools btl_bin_to_c_array.py -b &lt;binary_file&gt; -o &lt;hex_file&gt; -d &lt;device&gt; . | Refer to btl_bin_to_c_array utility for converting the binary to C array in hex format . . | . | Add the application hex header file generated in above step to the test app images path of the I2C embedded host application host_app_nvm/firmware/src/test_app_images/ . Example: If the application hex header file generated is for sam_d21_xpro.X project, Name it as image_pattern_hex_sam_d21_xpro.h and place it in above path | . | . | Configuring the NVM Host application . Follow below steps only when Host development kit is different than Target Development Kit . Open the host_app_nvm/firmware/*.X project in MPLABX IDE . | Open the “user.h” file as shown below: . . | In the “user.h” file specify the Bootloader Target Device used using the predefined macros #define APP_I2C_BOOTLOADER_TARGET_DEVICE SAM_D21_XPRO . . | Navigate to the #if block for the specified Bootloader Target Device and verify the below settings are as expected. . APP_HEX_HEADER_FILE: Relative path to the generated header file containing the application hex image in an array | APP_I2C_SLAVE_ADDR: I2C slave address | APP_ERASE_PAGE_SIZE: Erase page size of the target (target = MCU being programmed) | APP_PROGRAM_PAGE_SIZE: Program page size of the target (target = MCU being programmed). The macro can either be set to the program page size or can be set to the size of the erase page size of the target. | In the demo example, the macro is set equal to the size of the erase page. | On embedded host where RAM is limited, the macro may be set to the actual program page size to reduce the RAM used to hold the program data. For example, for SAM D20, the macro can be set either to 64 (program page size) or 256 (erase page size) | . | . | APP_IMAGE_START_ADDR: User application start address (This value should be same as the application start address specified in Application Configurations steps). If the bootloader itself is being upgraded then the APP_IMAGE_START_ADDR must be set to 0x00 (start of bootloader) | Ensure that the bootloader and application are also configured with the same value of user application start address | . | . |",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_nvm.html",
    "relUrl": "/apps/docs/readme_configure_host_app_nvm.html"
  }
  ,"10": {
    "title": "Configuring SDCARD Host applications",
    "content": ". Configuring the SDCARD Host applications . Downloading the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the SDCARD host applications within the repository is apps/i2c_bootloader/ . Configuring the SDCARD Host application . Follow below steps only when Host development kit is different than Target Development Kit . Open the host_app_sdcard/firmware/*.X project in MPLABX IDE . | Open the “user.h” file as shown below: . . | In the “user.h” file specify the Bootloader Target Device used using the predefined macros #define APP_I2C_BOOTLOADER_TARGET_DEVICE SAM_D21_XPRO . . | Navigate to the #if block for the specified Bootloader Target Device and verify the below settings are as expected. . APP_BINARY_FILE: Name of the Application binary copied to the SDCARD | APP_I2C_SLAVE_ADDR: I2C slave address | APP_ERASE_PAGE_SIZE: Erase page size of the target (target = MCU being programmed) | APP_PROGRAM_PAGE_SIZE: Program page size of the target (target = MCU being programmed). The macro can either be set to the program page size or can be set to the size of the erase page size of the target. | In the demo example, the macro is set equal to the size of the erase page. | On embedded host where RAM is limited, the macro may be set to the actual program page size to reduce the RAM used to hold the program data. For example, for SAM D20, the macro can be set either to 64 (program page size) or 256 (erase page size) | . | . | APP_IMAGE_START_ADDR: User application start address (This value should be same as the application start address specified in Application Configurations steps). If the bootloader itself is being upgraded then the APP_IMAGE_START_ADDR must be set to 0x00 (start of bootloader) | Ensure that the bootloader and application are also configured with the same value of user application start address | . | . | Follow below steps only when multiple Target development kit are to be programmed using the same Host development kit . Open the host application source file . | The APP_BL_NUM_I2C_SLAVES must be set equal to the number of slaves being programmed on the I2C bus . | Specify the following details in the firmwareUpdateInfo data structure for other slaves on the bus: . . i2cSlaveAddr: Specify the I2C slave address | erasePageSize: Specify the erase page size of the target (target = MCU being programmed) | programPageSize: Specify the program page size of the target (target = MCU being programmed). It can either be set to the program page size or can be set to the size of the erase page size of the target. | In the demo example, it is set equal to the size of the erase page. | On embedded host where RAM is limited, it may be set to the actual program page size to reduce the RAM used to hold the program data. For example, for SAM D20, the programPageSize can be set either to 64 (program page size) or 256 (erase page size). | . | . | appStartAddr: Specify the user application start address (This value should be same as the application start address specified in Application configuration). If the bootloader itself is being upgraded then the appStartAddr must be set to 0x00 (start of the bootloader). | Also, ensure that the bootloader is also configured with the same value of application start address. | . | filename: Specify the filename of the application binary | . |",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_sdcard.html",
    "relUrl": "/apps/docs/readme_configure_host_app_sdcard.html"
  }
  ,"11": {
    "title": "Host Application Configurations",
    "content": ". Configuring a Host Application used to send an application binary to bootloader . To configure NVM based host application refer to NVM Host Application Configuration . | To configure SDCARD based host application refer to SDCARD Host Application Configuration . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_application.html",
    "relUrl": "/apps/docs/readme_configure_host_application.html"
  }
  ,"12": {
    "title": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_c21n_xpro.X | MPLABX Project for SAM C21N Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_c21n_xpro.X | MPLABX Project for SAM C21N Xplained Pro Evaluation Kit | . Setting up SAM C21N Xplained Pro Evaluation Kit . SAM C21N Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM5 PAD[0]/PB16) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM5 PAD[0]/PB16) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM5 PAD[1]/PB17) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM5 PAD[1]/PB17) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM C21N Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_c21n_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_c21n_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_c21n_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_c21n_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html"
  }
  ,"13": {
    "title": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_d11_xpro.X | MPLABX Project for SAM D11 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_d11_xpro.X | MPLABX Project for SAM D11 Xplained Pro Evaluation Kit | . Setting up SAM D11 Xplained Pro Evaluation Kit . SAM D11 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM1 PAD[0]/PA22) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM1 PAD[0]/PA22) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM1 PAD[1]/PA23) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM1 PAD[1]/PA23) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM D11 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_d11_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d11_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_d11_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d11_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html"
  }
  ,"14": {
    "title": "Building and Running on SAMD20E15BU",
    "content": ". Building and Running the I2C WLCSP Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader_wlcsp/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/samd20e15bu_wlcsp.X | MPLABX Project for SAMD20E15BU | . Setting up SAMD20E15BU . SAM E54 Xplained Pro Evaluation Kit is used for the Host Development kit and SAMD20E15BU is used as the target . . | Connect the I2C SDA line (SERCOM7 PAD[0]/PD08) of the Host development kit to the I2C SDA line (SERCOM2 PAD[0]/PA08) of the target | Connect the I2C SCL line (SERCOM7 PAD[1]/PD09) of the Host development kit to the I2C SCL line (SERCOM2 PAD[1]/PA09) of the target | Connect a ground wire between the Host development kit and target | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Power up the target board | . Building and Configuring I2C Host Applications . Using I2C SDCARD Host application to send the application binary to Target development kit . . Open the application project to be programmed on target, in the IDE | To configure the application refer to Application Configurations | Build the project to generate the binary (Do not program the binary) . | Open the SDCARD host application project host_app_sdcard/firmware/sam_e54_xpro.X in the IDE | Build and program the SDCARD host application using the IDE on to the host dvelopment kit . | Copy the application binary into the SD card and rename it to image.bin | Insert the SD card in the SD card slot . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/samd20e15bu_wlcsp.X in the IDE | Build and program the application using the IDE on to the Target development kit | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | . | Additional Steps (Optional) . Using SDCARD Host application . If multiple Target devices are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html"
  }
  ,"15": {
    "title": "Building and Running on SAMD20E16BU",
    "content": ". Building and Running the I2C WLCSP Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader_wlcsp/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/samd20e16bu_wlcsp.X | MPLABX Project for SAMD20E16BU | . Setting up SAMD20E16BU . SAM E54 Xplained Pro Evaluation Kit is used for the Host Development kit and SAMD20E16BU is used as the target . . | Connect the I2C SDA line (SERCOM7 PAD[0]/PD08) of the Host development kit to the I2C SDA line (SERCOM2 PAD[0]/PA08) of the target | Connect the I2C SCL line (SERCOM7 PAD[1]/PD09) of the Host development kit to the I2C SCL line (SERCOM2 PAD[1]/PA09) of the target | Connect a ground wire between the Host development kit and target | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Power up the target board | . Building and Configuring I2C Host Applications . Using I2C SDCARD Host application to send the application binary to Target development kit . . Open the application project to be programmed on target, in the IDE | To configure the application refer to Application Configurations | Build the project to generate the binary (Do not program the binary) . | Open the SDCARD host application project host_app_sdcard/firmware/sam_e54_xpro.X in the IDE | Build and program the SDCARD host application using the IDE on to the host dvelopment kit . | Copy the application binary into the SD card and rename it to image.bin | Insert the SD card in the SD card slot . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/samd20e16bu_wlcsp.X in the IDE | Build and program the application using the IDE on to the Target development kit | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | . | Additional Steps (Optional) . Using SDCARD Host application . If multiple Target devices are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html"
  }
  ,"16": {
    "title": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_d20_xpro.X | MPLABX Project for SAM D20 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_d20_xpro.X | MPLABX Project for SAM D20 Xplained Pro Evaluation Kit | . Setting up SAM D20 Xplained Pro Evaluation Kit . SAM D20 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM D20 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_d20_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d20_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_d20_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d20_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html"
  }
  ,"17": {
    "title": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . Setting up SAM D21 Xplained Pro Evaluation Kit . SAM D21 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM D21 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_d21_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d21_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Using I2C SDCARD Host application to send the application binary to Target development kit . . If the SDCARD Host Development Kit being used is other than SAM D21 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring SDCARD Host application project . Open the SDCARD host application project host_app_sdcard/firmware/sam_d21_xpro.X in the IDE If a SDCARD host application project of different development kit is used then open that project in the IDE | . | Build and program the SDCARD host application using the IDE on to the I2C host dvelopment kit . | Open the test application project test_app/firmware/sam_d21_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) . | Copy the application binary into the SD card and insert the SD card in the SD card slot . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_d21_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | If SDCARD Host application was used to program the application binary following message will be displayed on the terminal of Host development kit . . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d21_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . Using SDCARD Host application . If multiple Target development kit are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html"
  }
  ,"18": {
    "title": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_da1_xpro.X | MPLABX Project for SAM DA1 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_da1_xpro.X | MPLABX Project for SAM DA1 Xplained Pro Evaluation Kit | . Setting up SAM DA1 Xplained Pro Evaluation Kit . SAM DA1 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM DA1 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_da1_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_da1_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_da1_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_da1_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html"
  }
  ,"19": {
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Setting up SAM E54 Xplained Pro Evaluation Kit . SAM E54 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM7 PAD[0]/PD08) on EXT3 of the Host development kit to the I2C SDA line Pin 11 (SERCOM3 PAD[0]/PA22) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM3 PAD[1]/PA23) on EXT3 of the Host development kit to the I2C SCL line Pin 12 (SERCOM3 PAD[1]/PA23) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM E54 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_e54_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Using I2C SDCARD Host application to send the application binary to Target development kit . . If the SDCARD Host Development Kit being used is other than SAM E54 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring SDCARD Host application project . Open the SDCARD host application project host_app_sdcard/firmware/sam_e54_xpro.X in the IDE If a SDCARD host application project of different development kit is used then open that project in the IDE | . | Build and program the SDCARD host application using the IDE on to the I2C host dvelopment kit . | Open the test application project test_app/firmware/sam_e54_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) . | Copy the application binary into the SD card and insert the SD card in the SD card slot . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_e54_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | If SDCARD Host application was used to program the application binary following message will be displayed on the terminal of Host development kit . . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . Using SDCARD Host application . If multiple Target development kit are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html"
  }
  ,"20": {
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Fail Safe Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_fail_safe_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Setting up SAM E54 Xplained Pro Evaluation Kit . SAM E54 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM7 PAD[0]/PD08) on EXT3 of the Host development kit to the I2C SDA line Pin 11 (SERCOM3 PAD[0]/PA22) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM3 PAD[1]/PA23) on EXT3 of the Host development kit to the I2C SCL line Pin 12 (SERCOM3 PAD[1]/PA23) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Running the Application . Open the bootloader project bootloader/firmware/sam_e54_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | Open the NVM host application project host_app_nvm/firmware/sam_e54_xpro.X in the IDE . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt combined bootloader and application HEX header file host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro_bootloader_app_merged.h will be programmed to the Target Development kit . | This must be programmed once to program both bootloader and application into the inactive flash bank . | . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | LED0 on the Target development kit should start blinking and you should see below output on the console . The NVM Flash Bank Can be BANK A or BANK B based on from where the test application is running | . | . . . | Press and hold the Switch SW0 on the Target development kit to trigger Bootloader from test application This is to program the application binary in other bank and you should see below output | . . | To program the prebuilt application image host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h to the inactive bank of Target Development kit, Open the “user.h” file of the NVM host application project host_app_nvm/firmware/sam_e54_xpro.X as shown below: . . | In the “user.h” file update the APP_HEX_HEADER_FILE and APP_IMAGE_START_ADDR values as mentioned below . #define APP_HEX_HEADER_FILE &quot;test_app_images/image_pattern_hex_sam_e54_xpro.h&quot; #define APP_IMAGE_START_ADDR 0x82000UL . . APP_HEX_HEADER_FILE: Relative path to the generated header file containing the application hex image in an array | APP_I2C_SLAVE_ADDR: I2C slave address | APP_ERASE_PAGE_SIZE: Erase page size of the target (target = MCU being programmed) | APP_PROGRAM_PAGE_SIZE: Program page size of the target (target = MCU being programmed). The macro can either be set to the program page size or can be set to the size of the erase page size of the target. | In the demo example, the macro is set equal to the size of the erase page. | On embedded host where RAM is limited, the macro may be set to the actual program page size to reduce the RAM used to hold the program data. | . | APP_IMAGE_START_ADDR: User application start address It must be set to 0x80000UL when programming the combined bootloader and application binary to the inactive bank | It must be set to 0x82000UL when programming the application binary only to the inactive bank | . | . | Build and program the NVM host application using the IDE on to the Host development kit . | On the Target Development Kit (the board being programmed), press and hold the Switch SW0 and then press Reset button or Power cycle to force trigger bootloader at startup LED0 will be turned-on to indicate that bootloader code is running on the target | . | Press Reset button on the Host development kit to program the application binary | Repeat Steps 7-8 once You should see other Bank in console displayed compared to first run | . | Additional Steps (Optional) . Generating Hex Image pattern for an application to be bootloaded . . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h refer to Application Configurations . | Build the application project to generate the binary (Do not program the binary) . | Convert the generated binary (.bin file) to a header file containing the image data in a C style array: On a Windows machine, open the command prompt and run the btl_bin_to_c_array utility to generate a header file containing the image data in an array . python &lt;harmony3_path&gt; bootloader tools btl_bin_to_c_array_gen.py -b &lt;binary_file&gt; -o &lt;harmony3_path&gt; bootloader_apps_i2c apps i2c_fail_safe_bootloader host_app_nvm firmware src test_app_images image_pattern_hex_sam_e54_xpro.h -d same5x . | . | Once done repeat the applicable steps mentioned in Running The Application | Generating Hex Image pattern for Commbined Bootloader and Application Binary . . Launch MHC for the bootloader project bootloader/firmware/sam_e54_xpro.X | Select system component from the project graph and disable fuse settings . | Disable Fuse Settings: Fuse settings needs to be disabled for the bootloader which will be boot-loaded as the fuse settings are supposed to be programmed through programming tool | Also the fuse settings are not programmable through firmware | Enabling the fuse settings also increases the size of the binary when generated through the hex file | . . | Regenrate the project . | Specifing post build option to automatically generate the binary file from hex file once the build is complete . \${MP_CC_DIR}/xc32-objcopy -I ihex -O binary \${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.hex \${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.bin . . | Build the bootloader project to generate the bootloader binary (Do not program the binary) . | Build the sample application test_app (or any other application configured to bootload) using IDE to generate the application binary (Do not program the binary) . | On a Windows machine, open the command prompt . | Run the btl_app_merge_bin.py utiliy from command prompt to merge the generated Bootloader binary and test application binary. Below output should be displayed on command prompt . python &lt;harmony3_path&gt; bootloader tools btl_app_merge_bin.py -o 0x2000 -b &lt;harmony3_path&gt; bootloader_apps_i2c apps i2c_fail_safe_bootloader bootloader firmware sam_e54_xpro.X dist sam_e54_xpro production sam_e54_xpro.X.production.bin -a &lt;harmony3_path&gt; bootloader_apps_i2c apps i2c_fail_safe_bootloader test_app firmware sam_e54_xpro.X dist sam_e54_xpro production sam_e54_xpro.X.production.bin . . | Run btl_bin_to_c_array utility to convert the generated merged binary btl_app_merged.bin to a header file containing the image data in a C style array The merged binary will be created in the directory from where the script was called . python &lt;harmony3_path&gt; bootloader tools btl_bin_to_c_array.py -b &lt;Path_to_merged_binary&gt; btl_app_merged.bin -o &lt;harmony3_path&gt; bootloader_apps_i2c apps i2c_fail_safe_bootloader host_app_nvm firmware src test_app_images image_pattern_hex_sam_e54_xpro_bootloader_app_merged.h -d same5x . | . | Once done repeat the applicable steps mentioned in Running The Application |",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html"
  }
  ,"21": {
    "title": "Building and Running on SAM HA1G16A Xplained Pro",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_ha1_xpro.X | MPLABX Project for SAM HA1G16A Xplained Pro | . Test Application . Project Name Description . test_app/firmware/sam_ha1_xpro.X | MPLABX Project for SAM HA1G16A Xplained Pro | . Setting up SAM HA1G16A Xplained Pro . SAM HA1G16A Xplained Pro is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM HA1G16A Xplained Pro then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_ha1_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_ha1_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_ha1_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_ha1_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html"
  }
  ,"22": {
    "title": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_l10_xpro.X | MPLABX Project for SAM L10 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_l10_xpro.X | MPLABX Project for SAM L10 Xplained Pro Evaluation Kit | . Setting up SAM L10 Xplained Pro Evaluation Kit . SAM L10 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM1 PAD[0]/PA16) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM1 PAD[0]/PA16) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM1 PAD[1]/PA17) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM1 PAD[1]/PA17) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM L10 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_l10_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l10_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_l10_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l10_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html"
  }
  ,"23": {
    "title": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_l21_xpro.X | MPLABX Project for SAM L21 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_l21_xpro.X | MPLABX Project for SAM L21 Xplained Pro Evaluation Kit | . Setting up SAM L21 Xplained Pro Evaluation Kit . SAM L21 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM L21 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_l21_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l21_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_l21_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l21_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html"
  }
  ,"24": {
    "title": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "content": ". Building and Running the I2C Bootloader applications . Downloading and building the application . To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. . Bootloader Application . Project Name Description . bootloader/firmware/sam_l22_xpro.X | MPLABX Project for SAM L22 Xplained Pro Evaluation Kit | . Test Application . Project Name Description . test_app/firmware/sam_l22_xpro.X | MPLABX Project for SAM L22 Xplained Pro Evaluation Kit | . Setting up SAM L22 Xplained Pro Evaluation Kit . SAM L22 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . . | Connect the I2C SDA line Pin 11 (SERCOM5 PAD[0]/PB30) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM5 PAD[0]/PB30) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM5 PAD[1]/PB31) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM5 PAD[1]/PB31) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Building and Configuring I2C Host Applications . Using I2C NVM Host application to send the application binary to Target development kit . . If the NVM Host Development Kit being used is other than SAM L22 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . Open the NVM host application project host_app_nvm/firmware/sam_l22_xpro.X in the IDE If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l22_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | Running the Application . Open the bootloader project bootloader/firmware/sam_l22_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . . | . | Press and hold the Switch SW0 to trigger Bootloader from test application | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 5-6 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 7 | . | Additional Steps (Optional) . Using I2C NVM Host application . To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l22_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html"
  }
  ,"25": {
    "title": "Release notes",
    "content": ". Microchip MPLAB® Harmony 3 Release Notes . Bootloader Release v3.2.0 . New Features . New part support - This release introduces support of . UART Bootloader for SAM HA1 family of 32-bit microcontrollers. . UART Fail Safe Bootloader for PIC32MZ EF, PIC32MZ DA, PIC32MK, PIC32MK GPK/GPL/MCM family of 32-bit microcontrollers. . I2C Bootloader for SAM C20/C21, SAM D09/D10/D11 SAM D20/D21, SAM DA1, SAME5x, SAMD5x, SAML10, SAML21, SAML22 family of 32-bit microcontrollers. . | Development kit and demo application support - The following table provides demo application available for different development kits. . Development kits UART Bootloader I2C Bootloader UART Fail Safe Bootloader I2C Fail Safe Bootloader . PIC32MK GP Development Kit | Yes | No | Yes | No | . PIC32MK MCJ Curiosity Pro | Yes | No | No | No | . PIC32MK MCM Curiosity Pro | Yes | No | Yes | No | . PIC32MX1/2/5 Starter Kit | Yes | No | NA | NA | . Curiosity PIC32MX470 Development Board | Yes | No | NA | NA | . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | Yes | No | Yes | No | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | Yes | No | Yes | No | . SAM C21N Xplained Pro Evaluation Kit | Yes | Yes | NA | NA | . SAM D11 Xplained Pro Evaluation Kit | Yes | Yes | NA | NA | . SAM D20 Xplained Pro Evaluation Kit | Yes | Yes | NA | NA | . SAM D21 Xplained Pro Evaluation Kit | Yes | Yes | NA | NA | . SAM DA1 Xplained Pro Evaluation Kit | Yes | Yes | NA | NA | . SAM E54 Xplained Pro Evaluation Kit | Yes | Yes | Yes | Yes | . SAM E70 Xplained Ultra Evaluation Kit | Yes | No | NA | NA | . SAM G55 Xplained Pro Evaluation Kit | Yes | No | NA | NA | . SAM L10 Xplained Pro Evaluation Kit | Yes | Yes | NA | NA | . SAM L21 Xplained Pro Evaluation Kit | Yes | Yes | NA | NA | . SAM L22 Xplained Pro Evaluation Kit | Yes | Yes | NA | NA | . | . Known Issues . The current known issues are as follows: . Use MPLAB X IDE V5.25 with SAM DA1 Xplained Pro. . | SAM HA1 will be supported in the next version of MPLAB X IDE release. . | The I2C bootloader for SAM E54 may not work with clock stretching for bootloader commands disabled. . | . Development Tools . MPLAB® X IDE v5.30 | MPLAB® XC32 C/C++ Compiler v2.30 | MPLAB® X IDE plug-ins: MPLAB® Harmony Configurator (MHC) v3.3.5 and above. | . | . Bootloader Release v3.1.2 . New Features . New part support - This release introduces initial support of UART bootloader for SAM DA1, SAM D09/D10/D11, PIC32MX 1XX/2XX, PIC32MX 1XX/2XX XLP, PIC32MX 1XX/2XX/5XX, PIC32MX 3XX/4XX, PIC32MX5XX/6XX/7XX, PIC32MZ EF, PIC32MZ DA, PIC32MK, PIC32MK GPH/GPG/MCJ, PIC32MK GPK/GPL/MCM, family of 32-bit microcontrollers. . | Development kit and demo application support - The following table provides number of demo application available for different development kits newly added in this release. . Development kits Bootloader applications . PIC32MK GPL Curiosity Pro | 2 | . PIC32MK MCJ Curiosity Pro | 2 | . PIC32MX1/2/5 Starter Kit | 2 | . Curiosity PIC32MX470 Development Board | 2 | . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | 2 | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | 2 | . SAM C21N Xplained Pro Evaluation Kit | 2 | . SAM D11 Xplained Pro Evaluation Kit | 2 | . SAM D20 Xplained Pro Evaluation Kit | 2 | . SAM D21 Xplained Pro Evaluation Kit | 2 | . SAM DA1 Xplained Pro Evaluation Kit | 2 | . SAM E54 Xplained Pro Evaluation Kit | 4 | . SAM E70 Xplained Ultra Evaluation Kit | 2 | . SAM G55 Xplained Pro Evaluation Kit | 2 | . SAM L10 Xplained Pro Evaluation Kit | 2 | . SAM L21 Xplained Pro Evaluation Kit | 2 | . SAM L22 Xplained Pro Evaluation Kit | 2 | . | Updated the Bootloader host scripts in bootloader/tools to be compatible with Python 3.x . | Moved the Bootloader host scripts compatible with Python 2.7.x to bootloader/tools_archive folder. These scripts may be removed in future. . | . Known Issues . The current known issues are as follows: . Configuration fuse macros are not generated for SAM D09/D10/D11 devices. . | PIC32MK GPK/GPL/MCM will be supported in the next version of MPLAB X IDE release. . | SAME70 Bootloader application may not work on lower system frequency with high UART Baud-Rate. . | Interactive help using the Show User Manual Entry in the Right-click menu for configuration options provided by this module is not yet available from within the MPLAB Harmony Configurator (MHC). Please see the Configuring the Library section in the help documentation in the doc folder for this Harmony 3 module instead. Help is available in CHM format. . | . Development Tools . MPLAB® X IDE v5.25 | MPLAB® XC32 C/C++ Compiler v2.30 | MPLAB® X IDE plug-ins: | MPLAB® Harmony Configurator (MHC) v3.3.0.1 and above. | . Bootloader Release v3.1.1 . Added MPLAB® Harmony License File | . Bootloader Release v3.1.0 . New Features . New part support - This release introduces initial support of UART bootloader for SAML10 and SAMG55 family of 32-bit microcontrollers. . | Development kit and demo application support - The following table provides number of demo application available for different development kits newly added in this release. . Development kits Bootloader applications . SAM C21N Xplained Pro Evaluation Kit | 2 | . SAM D20 Xplained Pro Evaluation Kit | 2 | . SAM D21 Xplained Pro Evaluation Kit | 2 | . SAM E54 Xplained Pro Evaluation Kit | 4 | . SAM E70 Xplained Ultra Evaluation Kit | 2 | . SAM G55 Xplained Pro Evaluation Kit | 2 | . SAM L10 Xplained Pro Evaluation Kit | 2 | . SAM L21 Xplained Pro Evaluation Kit | 2 | . SAM L22 Xplained Pro Evaluation Kit | 2 | . | . Known Issues . The current known issues are as follows: . SAME70 Bootloader application may not work on lower system frequency with high UART Baud-Rate. | . Development Tools . MPLAB® X IDE v5.20 | MPLAB® XC32 C/C++ Compiler v2.20 | MPLAB® X IDE plug-ins: MPLAB® Harmony Configurator (MHC) v3.3.0.1 and above. | . | . Bootloader Release v3.0.0 . New Features . New part support - This release introduces initial support for SAM C20/C21, SAM D20/D21, SAM S70, SAM E70, SAM V70/V71, SAME5x, SAMD5x, SAML21, SAML22 family of 32-bit microcontrollers. . | Added support for UART bootloader. . | Development kit and demo application support - The following table provides number of demo application available for different development kits newly added in this release. . Development kits Bootloader applications . SAM C21N Xplained Pro Evaluation Kit | 2 | . SAM D20 Xplained Pro Evaluation Kit | 2 | . SAM D21 Xplained Pro Evaluation Kit | 2 | . SAM E54 Xplained Pro Evaluation Kit | 4 | . SAM E70 Xplained Ultra Evaluation Kit | 2 | . SAM L21 Xplained Pro Evaluation Kit | 2 | . SAM L22 Xplained Pro Evaluation Kit | 2 | . | . Known Issues . The current known issues are as follows: . SAME70 Bootloader application may not work on lower system frequency with high UART Baud-Rate. | . Development Tools . MPLAB® X IDE v5.20 | MPLAB® XC32 C/C++ Compiler v2.20 | MPLAB® X IDE plug-ins: MPLAB® Harmony Configurator (MHC) v3.3.0.1 and above. | . | .",
    "url": "http://localhost:4000/bootloader_apps_i2c/release_notes.html",
    "relUrl": "/release_notes.html"
  }
  ,"26": {
    "title": "I2C Bootloader Applications",
    "content": ". MPLAB® Harmony 3 I2C Bootloader Application Examples . MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. . Microchip 32-bit MCUs | Microchip 32-bit MPUs | Microchip MPLAB X IDE | Microchip MPLAB Harmony | Microchip MPLAB Harmony Pages | . This repository contains the MPLAB® Harmony 3 I2C Bootloader application examples . Release Notes | MPLAB® Harmony License | . To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Contents Summary . Folder Description . apps | I2C Bootloader example applications | . docs | Applications help documentation | . Bootloader Examples . The following applications are provided to demonstrate the I2C bootloader . Name Description . I2C Bootloader | This example application shows how to use the Bootloader Library to bootload an application using I2C protocol | . I2C Faile Safe Bootloader | This example application shows how to use the Bootloader Library to bootload an application on device having dual flash bank feature using I2C protocol | . I2C WLCSP Bootloader | This example application shows how to use the Bootloader Library to bootload an application on WLCSP device using I2C protocol | . Bootloader Library . Refer to Bootloader Library Help for understanding . Bootloader framework | How the Bootloader library works | Bootloader library configurations | Bootloader memory layout | . . . . . .",
    "url": "http://localhost:4000/bootloader_apps_i2c/",
    "relUrl": "/"
  }
  
}`;
var data_for_search

var repo_name = "bootloader_apps_i2c";
var doc_folder_name = "docs";
var localhost_path = "http://localhost:4000/";
var home_index_string = "I2C Bootloader Applications";

(function (jtd, undefined) {

// Event handling

jtd.addEvent = function(el, type, handler) {
  if (el.attachEvent) el.attachEvent('on'+type, handler); else el.addEventListener(type, handler);
}
jtd.removeEvent = function(el, type, handler) {
  if (el.detachEvent) el.detachEvent('on'+type, handler); else el.removeEventListener(type, handler);
}
jtd.onReady = function(ready) {
  // in case the document is already rendered
  if (document.readyState!='loading') ready();
  // modern browsers
  else if (document.addEventListener) document.addEventListener('DOMContentLoaded', ready);
  // IE <= 8
  else document.attachEvent('onreadystatechange', function(){
      if (document.readyState=='complete') ready();
  });
}

// Show/hide mobile menu

function initNav() {
  const mainNav = document.querySelector('.js-main-nav');
  const pageHeader = document.querySelector('.js-page-header');
  const navTrigger = document.querySelector('.js-main-nav-trigger');

  jtd.addEvent(navTrigger, 'click', function(e){
    e.preventDefault();
    var text = navTrigger.innerText;
    var textToggle = navTrigger.getAttribute('data-text-toggle');

    mainNav.classList.toggle('nav-open');
    pageHeader.classList.toggle('nav-open');
    navTrigger.classList.toggle('nav-open');
    navTrigger.innerText = textToggle;
    navTrigger.setAttribute('data-text-toggle', text);
    textToggle = text;
  })
}

// Site search

function initSearch() {

    data_for_search = JSON.parse(myVariable);
    lunr.tokenizer.separator = /[\s/]+/

    var index = lunr(function () {
        this.ref('id');
        this.field('title', { boost: 200 });
        this.field('content', { boost: 2 });
        this.field('url');
        this.metadataWhitelist = ['position']

        var location = document.location.pathname;
        var path = location.substring(0, location.lastIndexOf("/"));
        var directoryName = path.substring(path.lastIndexOf("/")+1);

        var cur_path_from_repo = path.substring(path.lastIndexOf(repo_name));

        // Decrement depth by 2 as HTML files are placed in repo_name/doc_folder_name
        var cur_depth_from_doc_folder = (cur_path_from_repo.split("/").length - 2);

        var rel_path_to_doc_folder = "";

        if (cur_depth_from_doc_folder == 0) {
            rel_path_to_doc_folder = "./"
        }
        else {
            for (var i = 0; i < cur_depth_from_doc_folder; i++)
            {
                rel_path_to_doc_folder = rel_path_to_doc_folder + "../"
            }
        }

        for (var i in data_for_search) {

            data_for_search[i].url = data_for_search[i].url.replace(localhost_path + repo_name, rel_path_to_doc_folder);

            if (data_for_search[i].title == home_index_string)
            {
                data_for_search[i].url = data_for_search[i].url + "index.html"
            }

            this.add({
                id: i,
                title: data_for_search[i].title,
                content: data_for_search[i].content,
                url: data_for_search[i].url
            });
        }
    });

    searchResults(index, data_for_search);

function searchResults(index, data) {
    var index = index;
    var docs = data;
    var searchInput = document.querySelector('.js-search-input');
    var searchResults = document.querySelector('.js-search-results');

    function hideResults() {
      searchResults.innerHTML = '';
      searchResults.classList.remove('active');
    }

    jtd.addEvent(searchInput, 'keydown', function(e){
      switch (e.keyCode) {
        case 38: // arrow up
          e.preventDefault();
          var active = document.querySelector('.search-result.active');
          if (active) {
            active.classList.remove('active');
            if (active.parentElement.previousSibling) {
              var previous = active.parentElement.previousSibling.querySelector('.search-result');
              previous.classList.add('active');
            }
          }
          return;
        case 40: // arrow down
          e.preventDefault();
          var active = document.querySelector('.search-result.active');
          if (active) {
            if (active.parentElement.nextSibling) {
              var next = active.parentElement.nextSibling.querySelector('.search-result');
              active.classList.remove('active');
              next.classList.add('active');
            }
          } else {
            var next = document.querySelector('.search-result');
            if (next) {
              next.classList.add('active');
            }
          }
          return;
        case 13: // enter
          e.preventDefault();
          var active = document.querySelector('.search-result.active');
          if (active) {
            active.click();
          } else {
            var first = document.querySelector('.search-result');
            if (first) {
              first.click();
            }
          }
          return;
      }
    });

    jtd.addEvent(searchInput, 'keyup', function(e){
      switch (e.keyCode) {
        case 27: // When esc key is pressed, hide the results and clear the field
          hideResults();
          searchInput.value = '';
          return;
        case 38: // arrow up
        case 40: // arrow down
        case 13: // enter
          e.preventDefault();
          return;
      }

      hideResults();

      var input = this.value;
      if (input === '') {
        return;
      }

      var results = index.query(function (query) {
        var tokens = lunr.tokenizer(input)
        query.term(tokens, {
          boost: 10
        });
        query.term(tokens, {
          wildcard: lunr.Query.wildcard.TRAILING
        });
      });

      if (results.length > 0) {
        searchResults.classList.add('active');
        var resultsList = document.createElement('ul');
        resultsList.classList.add('search-results-list');
        searchResults.appendChild(resultsList);

        for (var i in results) {
          var result = results[i];
          var doc = docs[result.ref];

          var resultsListItem = document.createElement('li');
          resultsListItem.classList.add('search-results-list-item');
          resultsList.appendChild(resultsListItem);

          var resultLink = document.createElement('a');
          resultLink.classList.add('search-result');
          resultLink.setAttribute('href', doc.url);
          resultsListItem.appendChild(resultLink);

          var resultTitle = document.createElement('div');
          resultTitle.classList.add('search-result-title');
          resultTitle.innerText = doc.title;
          resultLink.appendChild(resultTitle);

          var resultRelUrl = document.createElement('span');
          resultRelUrl.classList.add('search-result-rel-url');
          resultRelUrl.innerText = doc.relUrl;
          resultTitle.appendChild(resultRelUrl);

          var metadata = result.matchData.metadata;
          var contentFound = false;
          for (var j in metadata) {
            if (metadata[j].title) {
              var position = metadata[j].title.position[0];
              var start = position[0];
              var end = position[0] + position[1];
              resultTitle.innerHTML = doc.title.substring(0, start) + '<span class="search-result-highlight">' + doc.title.substring(start, end) + '</span>' + doc.title.substring(end, doc.title.length)+'<span class="search-result-rel-url">'+doc.relUrl+'</span>';

            } else if (metadata[j].content && !contentFound) {
              contentFound = true;

              var position = metadata[j].content.position[0];
              var start = position[0];
              var end = position[0] + position[1];
              var previewStart = start;
              var previewEnd = end;
              var ellipsesBefore = true;
              var ellipsesAfter = true;
              for (var k = 0; k < 3; k++) {
                var nextSpace = doc.content.lastIndexOf(' ', previewStart - 2);
                var nextDot = doc.content.lastIndexOf('.', previewStart - 2);
                if ((nextDot > 0) && (nextDot > nextSpace)) {
                  previewStart = nextDot + 1;
                  ellipsesBefore = false;
                  break;
                }
                if (nextSpace < 0) {
                  previewStart = 0;
                  ellipsesBefore = false;
                  break;
                }
                previewStart = nextSpace + 1;
              }
              for (var k = 0; k < 10; k++) {
                var nextSpace = doc.content.indexOf(' ', previewEnd + 1);
                var nextDot = doc.content.indexOf('.', previewEnd + 1);
                if ((nextDot > 0) && (nextDot < nextSpace)) {
                  previewEnd = nextDot;
                  ellipsesAfter = false;
                  break;
                }
                if (nextSpace < 0) {
                  previewEnd = doc.content.length;
                  ellipsesAfter = false;
                  break;
                }
                previewEnd = nextSpace;
              }
              var preview = doc.content.substring(previewStart, start);
              if (ellipsesBefore) {
                preview = '... ' + preview;
              }
              preview += '<span class="search-result-highlight">' + doc.content.substring(start, end) + '</span>';
              preview += doc.content.substring(end, previewEnd);
              if (ellipsesAfter) {
                preview += ' ...';
              }

              var resultPreview = document.createElement('div');
              resultPreview.classList.add('search-result-preview');
              resultPreview.innerHTML = preview;
              resultLink.appendChild(resultPreview);
            }
          }
        }
      }
    });

    jtd.addEvent(searchInput, 'blur', function(){
      setTimeout(function(){ hideResults() }, 300);
    });
  }
}

function pageFocus() {
  var mainContent = document.querySelector('.js-main-content');
  mainContent.focus();
}

// Document ready

jtd.onReady(function(){
  initNav();
  pageFocus();
  if (typeof lunr !== 'undefined') {
    initSearch();
  }
});

})(window.jtd = window.jtd || {});


