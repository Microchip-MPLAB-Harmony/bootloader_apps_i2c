{"0": {
    "doc": "License",
    "title": "License",
    "content": "MICROCHIP SOFTWARE IS PROVIDED SOLELY TO ASSIST YOU IN DEVELOPING PRODUCTS AND SYSTEMS THAT USE MICROCHIP PRODUCTS. DOWNLOAD AND/OR USE OF THE SOFTWARE REQUIRES THAT YOU ACCEPT THIS SOFTWARE LICENSE AGREEMENT. IF YOU DO NOT WISH TO ACCEPT THESE TERMS, DO NOT DOWNLOAD OR USE ANY OF THE SOFTWARE. DOWNLOADING OR USING THE SOFTWARE CONTITUTES YOUR ACCEPTANCE OF THIS SOFTWARE LICENSE AGREEMENT. SOFTWARE LICENSE AGREEMENT . This Software License Agreement (“Agreement”) is an agreement between you (if licensing as an individual) or the entity you represent (if licensing as a business) (“you” or “Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its affiliates including Microchip Technology Ireland Limited, a company organized under the laws of Ireland, with a principal address at Ground Floor, Block W., East Point Business Park, Dublin, Ireland 3 (collectively, “Microchip”) for the Microchip MPLAB Harmony Integrated Software Framework and documentation included in the download or otherwise provided by Microchip to Licensee (collectively, the “Software”). 1. Use. Subject to the terms of this Agreement, Microchip hereby grants Licensee a limited, revocable, non-exclusive, non-transferable, worldwide license to (a) use the Software, and (b) modify the Software provided in source code form, if any (and use and copy modifications of such Software made by Licensee), provided that in each case (with respect to clauses (a) and (b)) Licensee solely uses the Software with Microchip Products, Licensee Products, or other products agreed to by Microchip in writing. Licensee has no right to (i) substitute third party products for Microchip Products, or (ii) except as expressly provided in Section 2 below, sublicense its rights under this Agreement or otherwise disclose or distribute the Software to any third party. Licensee may make a reasonable number of copies of the Software solely as necessary to exercise its license rights in this Section 1. Licensee will not remove or alter any copyright, trademark, or other proprietary notices contained on or in the Software or any copies. “Microchip Products” means those Microchip devices purchased from Microchip or one of its authorized distributors that are identified in the Software, or if not identified in the Software, then such Microchip devices that are consistent with the purpose of the Software, including but not limited to Microchip 32-bit microcontroller and microprocessor devices and the like. “Licensee Products” means products manufactured by or for Licensee that use or incorporate Microchip Products. 2. Subcontractors. If Licensee wishes for its subcontractor to obtain and use the Software in order to provide design, manufacturing, or other services to Licensee: (a) such subcontractor may (i) download and agree to the terms of this Agreement or (ii) contact Microchip directly for a copy of this Agreement and agree to its terms; or (b) Licensee may sublicense the rights described in Section 1 directly to its subcontractor, provided that (i) such subcontractor agrees in writing to the terms of this Agreement - a copy of which will be provided to Microchip upon request, and (ii) Licensee is liable for such subcontractor's acts and omissions. 3. Third Party Software. (a) Third Party Materials. Licensee agrees to comply with third party license terms applicable to Third Party Materials, if any. Microchip will not be held responsible for Licensee's failure to comply with such terms. Microchip has no obligation to provide support or maintenance for Third Party Materials. \"Third Party Materials\" means the third party software, systems, tools, or specifications (including those of a standards setting organization) referenced in, bundled with, or included in the Software. (b) Open Source Components. Notwithstanding the license grant in Section 1 above, Licensee acknowledges that the Software may include Open Source Components. To the extent required by the licenses covering Open Source Components, the terms of such license apply in lieu of the terms of this Agreement. To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, those restrictions will not apply to the Open Source Component. \"Open Source Components\" means components of the Software that are subject to the terms of an Open Source License. \"Open Source License\" means any software license approved as an open source license by the Open Source Initiative or any substantially similar license, including without limitation any license that, as a condition of distribution of the software licensed under such license, requires that the distributor make the software available in source code format. 4. Licensee Obligations. (a) Restrictions. Except as expressly permitted by this Agreement, Licensee agrees that it will not (i) modify or alter the Software or a Microchip Product; (ii) adapt, translate, decompile, reverse engineer, disassemble the Software provided in object code form, any Microchip Product, or any samples or prototypes provided by Microchip, or create derivative works thereof; or (iii) use the Software with any software or other materials that are subject to licenses or restrictions (e.g., Open Source Licenses) that, when combined with the Software, would require Microchip to disclose, license, distribute, or otherwise make all or any part of such Software available to anyone. (b) Indemnity. Licensee will indemnify (and, at Microchip's election, defend) Microchip from and against any and all claims, costs, damages, expenses (including reasonable attorneys' fees), liabilities, and losses, arising out of or related to: (i) Licensee's modification, disclosure, or distribution of the Software or Third Party Materials; (ii) the use, sale, or distribution of Licensee Products; and (iii) an allegation that Licensee Products or Licensee's modification of the Software infringe third party intellectual property rights. (c) Licensee Products. Licensee understands and agrees that Licensee remains responsible for using its independent analysis, evaluation, and judgment in designing Licensee Products and systems and has full and exclusive responsibility to assure the safety of its products and compliance of its products (and of all Microchip Products used in or for such Licensee Products) with applicable laws and requirements. 5. Confidentiality. (a) Licensee agrees that the Software, underlying inventions, algorithms, know-how, and ideas relating to the Software, and any other non-public business or technical information disclosed by Microchip to Licensee are confidential and proprietary information, including information derived therefrom, belonging to Microchip and its licensors (collectively, \"Confidential Information\"). Licensee will use Confidential Information only to exercise its rights and perform its obligations under this Agreement and will take all reasonable measures to protect the secrecy of and avoid unauthorized access, disclosure, and use of Confidential Information. Such measures include, but are not limited to, the highest degree of care that it uses to protect its own information of a similar nature, but not less than reasonable care. Licensee will only disclose Confidential Information to its employees, subcontractors, consultants, auditors and representatives (collectively \"Representatives\") who have a need to know such information and who have use and confidentiality obligations to Licensee at least as restrictive as those set forth in this Agreement. Licensee is responsible for disclosure or misuse of Confidential Information by its Representatives. Use of Confidential Information for personal gain, for the benefit of a third party or to compete with Microchip, whether directly or indirectly, is a breach of this Agreement. Licensee will notify Microchip in writing of any actual or suspected misuse, misappropriation, or unauthorized disclosure of Confidential Information that comes to Licensee's attention. Confidential Information will not include information that: (i) is or becomes publicly available without breach of this Agreement; (ii) is known or becomes known to Licensee from a source other than Microchip without restriction and without breach of this Agreement or violation of Microchip's rights, as demonstrated by credible evidence in existence at the time of disclosure; (iii) is independently developed by Licensee without use of or reference to the Confidential Information, as demonstrated by credible evidence in existence at the time of independent development; or (iv) is disclosed generally to third parties by Microchip without restrictions similar to those contained in this Agreement. Licensee may disclose Confidential Information to the extent required under law, rule, or regulation (including those of any national securities exchange), by subpoena, civil investigative demand, or similar process, or by a court or administrative agency (each a \"Requirement\"'), provided, that to the extent permitted by applicable law, Licensee will provide prompt notice of such Requirement to Microchip to enable Microchip to seek a protective order or otherwise prevent or restrict such disclosure. (b) Return of Materials. Upon Microchip's request and direction, Licensee will promptly return or destroy the Confidential Information, including any physical information or materials provided to Licensee (together with any copies, excerpts, syntheses, CD ROMS, diskettes, etc.), and, in the case of information derived therefrom, provide written certification that all the Confidential Information has been expunged from any such materials or that all such materials have been destroyed. Further, if Licensee or its affiliates become competitors of Microchip, and Microchip notifies Licensee in writing of its status as a competitor in a given market, then Licensee will promptly engage in the return and certification process described above in this Section 5(b). 6. Ownership and Retention of Rights. All rights, title, and interest (including all intellectual property rights) in and to the Software, including any derivative works of the Software and any incremental modifications to the Software whether made by or for Licensee or Microchip (collectively, \"Microchip Property\"), are and will remain the sole and exclusive property of Microchip, whether such Microchip Property is separate or combined with any other products. Licensee, on behalf of itself and its affiliates, agrees to, and does hereby, assign to Microchip or its designee all right, title and interest (including all intellectual property rights) in and to derivative works of and any incremental modifications to the Software. Licensee will take (and will cause its affiliates, their subcontractors, and all related individuals to take) all action as may be reasonably necessary, proper or advisable to perfect and secure the ownership, licenses, intellectual property and other rights of or to Microchip as set forth in this Agreement. All rights not expressly granted under this Agreement are reserved to Microchip and its licensors and suppliers, and there are no implied rights. Licensee retains all right, title, and interest in and to any technology independently developed by Licensee not derived, directly or indirectly, from the Microchip Property or any other item of tangible property provided to Licensee by Microchip hereunder. 7. Termination. This Agreement will start once accepted by Licensee and continue unless and until terminated as provided in this Agreement. This Agreement automatically terminates immediately if Licensee violates the restrictions set forth in Sections 1, 2 or 4(a). Microchip may terminate this Agreement immediately upon notice if (a) Licensee or its affiliates become competitors of Microchip, or (b) Licensee breaches any other term of this Agreement and does not cure such breach within 30 days after receipt of written notice of such breach from Microchip. Upon termination of this Agreement, (i) the license grants in Sections 1 and 2(b) terminate, and (ii) Licensee will return to Microchip or destroy (and certify the destruction of) all Microchip Property and Confidential Information in its possession or under its control, and all copies thereof. The following sections survive termination of this Agreement: 3, 4, 5, 6, 7, 8, 9, 10, 11 and 12. 8. Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (\"Dangerous Applications\"). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. 9. EU Consumers - Applicable Terms. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, THE FOLLOWING PROVISIONS APPLY INSTEAD OF SECTIONS 9 AND 10 BELOW: Microchip and its licensors will not be liable (a) for any loss suffered by Licensee in connection with the Software where such loss was not reasonably foreseeable when the Software was first downloaded by Licensee, even if such loss was the result of negligence or the failure of Microchip and its licensors to comply with this Agreement; or (b) irrespective of the basis of claim, for any loss of revenue, profit or other business or economic loss suffered. Some Software is made available to Licensee free of charge, and Licensee may at any time download further copies without charge to replace the Software initially downloaded and others may require a fee to be downloaded, or to download any further copies. In all circumstances, to the extent liability may lawfully be limited or excluded, the cumulative liability of Microchip and its licensors will not exceed USD$1,000 (or equivalent sum in the currency of the country in which Licensee resides). However, none of the foregoing limits or excludes any liability for death or personal injury arising from negligence, or for fraud, fraudulent misrepresentation or any other cause that by law cannot be excluded and limited. 10. Warranty Disclaimers. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, THE SOFTWARE IS LICENSED ON AN \"AS-IS\" BASIS. MICROCHIP MAKES NO WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER EXPRESS, IMPLIED, STAUTORY OR OTHERWISE, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR NON-INFRINGEMENT AND ANY WARRANTIES THAT MAY ARISE FROM USAGE OF TRADE OR COURSE OF DEALING. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. TECHNICAL ASSISTANCE, IF PROVIDED, WILL NOT EXPAND THESE WARRANTIES. IF CUSTOMER IS A CONSUMER, THE ABOVE WILL NOT ACT TO EXCLUDE YOUR STATUTORY RIGHTS. 11. Limited Liability. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, IN NO EVENT WILL MICROCHIP BE LIABLE, WHETHER IN CONTRACT, WARRANTY, REPRESENTATION, TORT, STRICT LIABILITY, INDEMNITY, CONTRIBUTION OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, PUNITIVE, EXEMPLARY, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER, HOWEVER CAUSED, OR ANY LOSS OF PRODUCTION, COST OF PROCUREMENT OF SUBSTITUTE PRODUCTS OR SERVICES, ANY LOSS OF PROFITS, LOSS OF BUSINESS, LOSS OF USE OR LOSS OF DATA, OR INTERRUPTION OF BUSINESS ARISING OUT OF THIS AGREEMENT, HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, AND NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY. MICROCHIP'S TOTAL AGGREGATE LIABILITY UNDER THIS AGREEMENT WILL NOT EXCEED USD$1,000. 12. General. (a) This Agreement will be governed by and construed in accordance with the laws of the State of Arizona and the United States, without regard to conflicts of law provisions. The parties hereby irrevocably consent to the exclusive personal jurisdiction and venue of the state and federal courts in Maricopa County, Arizona for any dispute relating to this Agreement. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, this Agreement is subject to the laws of the country in which the Software is downloaded, and, to the extent so mandated by such laws, subject to the jurisdiction of the courts of that country. The parties expressly disclaim the applicability of the United Nations Convention on Contracts for the International Sale of Goods in connection with this Agreement. (b) Unless the parties have a mutually executed agreement relating to the licensing of this Software by Microchip to Licensee (\"Signed Agreement\"), this Agreement constitutes the entire agreement between the parties with respect to the Software, and supersedes and replaces prior or contemporaneous written or verbal agreements or communications between the parties regarding the Software, including any purchase orders. If the parties have a Signed Agreement, this Agreement does not supersede or replace that Signed Agreement. This Agreement will not be modified except by a written agreement signed by an authorized representative of Microchip. If any provision of this Agreement is held by a court of competent jurisdiction to be illegal, invalid, or unenforceable, that provision will be limited or eliminated to the minimum extent necessary so that this Agreement will otherwise remain in full force and effect and enforceable. No waiver of any breach of any provision of this Agreement constitutes a waiver of any prior, concurrent, or subsequent breach of the same or any other provisions of this Agreement, and no waiver will be effective unless made in writing and signed by an authorized representative of the waiving party. (c) Licensee agrees to comply with all import and export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (d) This Agreement will bind and inure to the benefit of each party's permitted successors and assigns. Licensee may not assign this Agreement in whole or in part, whether by law or otherwise, without Microchip's prior written consent. Any merger, consolidation, amalgamation, reorganization, transfer of all or substantially all assets or other change in control or majority ownership (\"Change of Control\") is considered an assignment for the purpose of this Section. Any attempt to assign this Agreement without such consent will be null and void. However, Microchip may assign this Agreement to an affiliate, or to another entity in the event of a Change of Control. (e) Licensee acknowledges its breach of any confidentiality or proprietary rights provision of this Agreement would cause Microchip irreparable damage, for which the award of damages would not be an adequate remedy. Licensee, therefore, agrees if Microchip alleges that Licensee has breached or violated any such provisions then Microchip may seek equitable relief, in addition to all other remedies at law or in equity. (f) Authorized representatives of Microchip shall have the right to reasonably inspect Licensee's premises and to audit Licensee's records and inventory of Licensee Products, whether located on Licensee's premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee's adherence to the terms of this Agreement. (g) Consistent with 48 C.F.R. §12.212 or 48 C.F.R. §227.7202-1 through 227.7202-4, as applicable, the Software is being licensed to U.S. Government end users (i) only as Commercial Items, and (ii) with only those rights as are granted to all other end users pursuant to the terms and conditions of the applicable Microchip licenses. To the extent the Software (or a portion thereof) qualifies as 'technical data' as such term is defined in 48 C.F.R. §252.227-7015(a)(5), then its use, duplication, or disclosure by the U.S. Government is subject to the restrictions set forth in subparagraphs (a) through (e) of the Rights in Technical Data clause at 48 C.F.R. §252.227-7015. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199. Questions about this Agreement should be sent to: Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA. ATTN: Marketing. v.3.3.2021 . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "I2C WLCSP Bootloader",
    "title": "I2C WLCSP Bootloader",
    "content": "This example application shows how to use the Bootloader Library to bootload an application using I2C protocol. Bootloader Application . | This is a bootloader application which resides from starting location of the device flash memory | Bootloader runs from RAM to allow self-upgradation of the bootloader code itself. | Trigger Methods: . | By driving I2C SDA and SCL low on external reset. This assumes that the bootloader host application has control over the reset pin to ensure that execution of the bootloader starts after the values of SCL and SDA pins is settled to a desired level. | Pattern - 0x5048434D in each of the first 4 words (total 16 bytes), starting from RAM address - 0x20000000 | No valid application. Application is considered invalid if the first 4 bytes of the application (which contains the starting address for the main stack pointer) are 0xFFFFFFFF | . | Port pins used for I2C communication: . | PA08 (SERCOM2_PAD0) | PA09 (SERCOM2_PAD1) | . | Bootloader programs fuse settings to default values. Any custom fuse bit settings must be programmed by the application | Bootloader uses I2C peripheral library in non-interrupt mode and implements two tasks: . | To process the I2C events | To perform flash read/write/verify operations | . | . SDCARD Host Application . | This is a embedded I2C host application which sends the application image stored in the SD card to the target board over the I2C bus | The user application binary is copied into an SD card and inserted in the SD card slot on the host board . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/readme.html#i2c-wlcsp-bootloader",
    "relUrl": "/apps/i2c_bootloader_wlcsp/readme.html#i2c-wlcsp-bootloader"
  },"2": {
    "doc": "I2C WLCSP Bootloader",
    "title": "Targets",
    "content": "The following table provides links to documentation on how to build and run I2C WLCSP bootloader on SAMD20E15BU and SAMD20E16BU targets . | Development Kit | . | SAMD20E15BU | . | SAMD20E16BU | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/readme.html#targets",
    "relUrl": "/apps/i2c_bootloader_wlcsp/readme.html#targets"
  },"3": {
    "doc": "I2C WLCSP Bootloader",
    "title": "I2C WLCSP Bootloader",
    "content": ". To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/readme.html",
    "relUrl": "/apps/i2c_bootloader_wlcsp/readme.html"
  },"4": {
    "doc": "I2C Bootloader",
    "title": "I2C Bootloader",
    "content": "This example application shows how to use the Bootloader Library to bootload an application using I2C protocol. Bootloader Application . | This is a bootloader application which resides from starting location of the device flash memory | It uses I2C peripheral library in non-interrupt mode | Trigger Methods . | It uses the On board Switch as bootloader trigger pin to force enter the bootloader at reset of device | It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device | . | . NVM Host Application . | This is a embedded I2C host application which sends the application image stored in it’s internal flash (NVM) to the target board over the I2C bus | The user application binary must be converted to a header file containing the application image in HEX format in a C style array. A btl_bin_to_c_array.py utility is provided to do this conversion . | Add the generated application image header file to the NVM host application project. Rebuild and program the NVM host application. This results in the application image being copied in the host MCU’s flash (NVM) | . SDCARD Host Application . | This is a embedded I2C host application which sends the application image stored in the SD card to the target board over the I2C bus | The user application binary is copied into an SD card and inserted in the SD card connected on the host board . | . Test Application . | This is a test application which resides from end of bootloader size in device flash memory | It will be loaded into flash memory by bootloader application | It blinks an LED and provides console output | It uses the On board Switch to trigger the bootloader from firmware (May not be supported on all devices) . | Once the switch is pressed it loads first 16 bytes of RAM with bootloader request pattern (0x5048434D) and resets the device | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/readme.html#i2c-bootloader",
    "relUrl": "/apps/i2c_bootloader/readme.html#i2c-bootloader"
  },"5": {
    "doc": "I2C Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run I2C bootloader on different development kits . | Development Kit | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | . | PIC32MK MCA Curiosity Pro | . | PIC32MM USB Curiosity Development Board | . | SAM C21N Xplained Pro Evaluation Kit | . | SAM D11 Xplained Pro Evaluation Kit | . | SAM D20 Xplained Pro Evaluation Kit | . | SAM D21 Xplained Pro Evaluation Kit | . | SAM DA1 Xplained Pro Evaluation Kit | . | SAM E54 Xplained Pro Evaluation Kit | . | SAM HA1G16A Xplained Pro | . | SAM L10 Xplained Pro Evaluation Kit | . | SAM L21 Xplained Pro Evaluation Kit | . | SAM L22 Xplained Pro Evaluation Kit | . | SAM E70 Xplained Ultra Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/readme.html#development-kits",
    "relUrl": "/apps/i2c_bootloader/readme.html#development-kits"
  },"6": {
    "doc": "I2C Bootloader",
    "title": "I2C Bootloader",
    "content": ". To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/readme.html",
    "relUrl": "/apps/i2c_bootloader/readme.html"
  },"7": {
    "doc": "I2C Fail Safe Bootloader",
    "title": "I2C Fail Safe Bootloader",
    "content": "This example application shows how to use the Bootloader Library to bootload an application on device having dual flash bank feature using I2C protocol . Bootloader Application . | This is a fail safe bootloader application which resides from starting location of both the banks of device flash memory region for SAM devices with dual bank support | It uses I2C peripheral library in non-interrupt mode | Trigger Methods . | It uses the On board Switch as bootloader trigger pin to force enter the bootloader at reset of device | It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device | . | . NVM Host Application . | This is a embedded I2C host application which sends the application image stored in it’s internal flash (NVM) to the inactive bank of the target board over the I2C bus . | The user application binary must be converted to a header file containing the application image in HEX format in a C style array. A btl_bin_to_c_array.py utility is provided to do this conversion . | To program the bootloader to the inactive flash bank, the user application binary may be combined with the bootloader using the btl_app_merge_bin.py utility. The combined binary file must be converted to a header file using the btl_bin_to_c_array.py utility . | Add the generated image header file of the application or bootloader and application combined to the NVM host application project. Rebuild and program the NVM host application. This results in the application image being copied in the host MCU’s flash (NVM) . | . Test Application . | This is a test application which resides from end of bootloader size in device flash memory | It will be loaded into flash memory by bootloader application | It blinks an LED and provides console output | It uses the On board Switch to trigger the bootloader from firmware . | Once the switch is pressed it loads first 16 bytes of RAM with bootloader request pattern (0x5048434D) and resets the device | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/readme.html#i2c-fail-safe-bootloader",
    "relUrl": "/apps/i2c_fail_safe_bootloader/readme.html#i2c-fail-safe-bootloader"
  },"8": {
    "doc": "I2C Fail Safe Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run I2C Fail Safe bootloader on different development kits . | Development Kit | . | SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/readme.html#development-kits",
    "relUrl": "/apps/i2c_fail_safe_bootloader/readme.html#development-kits"
  },"9": {
    "doc": "I2C Fail Safe Bootloader",
    "title": "I2C Fail Safe Bootloader",
    "content": ". To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/readme.html",
    "relUrl": "/apps/i2c_fail_safe_bootloader/readme.html"
  },"10": {
    "doc": "I2C Bootloader Host Tools",
    "title": "I2C Bootloader Tools Help",
    "content": "This document describes the usage of I2C bootloader host tools . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/readme.html#i2c-bootloader-tools-help",
    "relUrl": "/tools/readme.html#i2c-bootloader-tools-help"
  },"11": {
    "doc": "I2C Bootloader Host Tools",
    "title": "Downloading the host tools",
    "content": "To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Following host tools are provided to be used with different bootloaders . | Host Script | Description | . | btl_app_merge_bin.py | Used to merge the bootloader binary and application binary | . | btl_bin_to_c_array.py | Used to convert the binary file to a C style array containing Hex output | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/readme.html#downloading-the-host-tools",
    "relUrl": "/tools/readme.html#downloading-the-host-tools"
  },"12": {
    "doc": "I2C Bootloader Host Tools",
    "title": "I2C Bootloader Host Tools",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/readme.html",
    "relUrl": "/tools/readme.html"
  },"13": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Bootloader and Application binary merge script Help",
    "content": "This document describes the usage of btl_app_merge_bin.py host script . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_app_merge_bin.html#bootloader-and-application-binary-merge-script-help",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#bootloader-and-application-binary-merge-script-help"
  },"14": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Downloading the host script",
    "content": "To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the tool in bootloader repository is tools/btl_app_merge_bin.py . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_app_merge_bin.html#downloading-the-host-script",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#downloading-the-host-script"
  },"15": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Setting up the Host PC",
    "content": ". | The Script is compatible with Python 3.x and higher | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_app_merge_bin.html#setting-up-the-host-pc",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#setting-up-the-host-pc"
  },"16": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Description",
    "content": ". | This script should be used to merge the bootloader binary and application binary . | It creates a merged binary output where bootloader is placed from start and the application will be placed at the offset passed as parameter . | If the application offset is not equal to end of bootloader offset it fills the gap with 0xFF until the application offset . | The merged binary can be used by I2C NVM Host Application as input for Updating bootloader and application together . | The merged binary will be created in the directory from where the script was called . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_app_merge_bin.html#description",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#description"
  },"17": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Usage Examples",
    "content": "Below is the syntax to show help menu for the script . python &lt;harmony3_path&gt;/bootloader/tools/btl_app_merge_bin.py --help . Below is the syntax and an example on how to merge a bootloader binary and application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_app_merge_bin.py -o &lt;Offset&gt; -b &lt;Bootloader_binary_path&gt; -a &lt;Application_binary_path&gt; . python &lt;harmony3_path&gt;/bootloader/tools/btl_app_merge_bin.py -o 0x2000 -b &lt;harmony3_path&gt;/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin -a &lt;harmony3_path&gt;/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/test_app/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_app_merge_bin.html#usage-examples",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#usage-examples"
  },"18": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Bootloader and Application binary merge script",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_app_merge_bin.html",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html"
  },"19": {
    "doc": "Binary to C Array script help",
    "title": "Binary to C Array script help",
    "content": "This document describes the usage of btl_bin_to_c_array.py host script . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_bin_to_c_array.html#binary-to-c-array-script-help",
    "relUrl": "/tools/docs/readme_btl_bin_to_c_array.html#binary-to-c-array-script-help"
  },"20": {
    "doc": "Binary to C Array script help",
    "title": "Downloading the host script",
    "content": "To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the tool in bootloader repository is tools/btl_bin_to_c_array.py . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_bin_to_c_array.html#downloading-the-host-script",
    "relUrl": "/tools/docs/readme_btl_bin_to_c_array.html#downloading-the-host-script"
  },"21": {
    "doc": "Binary to C Array script help",
    "title": "Setting up the Host PC",
    "content": ". | The Script is compatible with Python 3.x and higher | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_bin_to_c_array.html#setting-up-the-host-pc",
    "relUrl": "/tools/docs/readme_btl_bin_to_c_array.html#setting-up-the-host-pc"
  },"22": {
    "doc": "Binary to C Array script help",
    "title": "Description",
    "content": ". | This script should be used to convert the binary file to a C style array containing Hex output that can be directly included in target application code . | It is mainly used when programming the application using the host_app_nvm application in I2C Bootloader | If size of the input binary file is not aligned to device erase boundary it appends 0xFF to the binary to make it aligned and then generates the Hex output . | User must specify the binary file to convert (-b), hex output file (-o) and the device (-d) . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_bin_to_c_array.html#description",
    "relUrl": "/tools/docs/readme_btl_bin_to_c_array.html#description"
  },"23": {
    "doc": "Binary to C Array script help",
    "title": "Usage Examples",
    "content": "Below is the syntax to show help menu for the script . python &lt;harmony3_path&gt;/bootloader/tools/btl_bin_to_c_array.py --help . Below is the syntax and an example on how to convert the binary file to a C style array containing Hex output . python &lt;harmony3_path&gt;/bootloader/tools/btl_bin_to_c_array.py -b &lt;binary_file&gt; -o &lt;hex_file&gt; -d &lt;device&gt; . python &lt;harmony3_path&gt;/bootloader/tools/btl_bin_to_c_array.py -b &lt;harmony3_path&gt;/bootloader_apps_i2c/apps/i2c_bootloader/test_app/firmware/sam_d20_xpro.X/dist/sam_d20_xpro/production/sam_d20_xpro.X.production.bin -o &lt;harmony3_path&gt;/bootloader_apps_i2c/apps/i2c_bootloader/host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d20_xpro.h -d samd2x . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_bin_to_c_array.html#usage-examples",
    "relUrl": "/tools/docs/readme_btl_bin_to_c_array.html#usage-examples"
  },"24": {
    "doc": "Binary to C Array script help",
    "title": "Binary to C Array script help",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/tools/docs/readme_btl_bin_to_c_array.html",
    "relUrl": "/tools/docs/readme_btl_bin_to_c_array.html"
  },"25": {
    "doc": "Application Configurations",
    "title": "Configuring an Application to be bootloaded",
    "content": ". | To bootload a CORTEX-M based application refer to Application Configurations for CORTEX-M based MCUs | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application.html#configuring-an-application-to-be-bootloaded",
    "relUrl": "/apps/docs/readme_configure_application.html#configuring-an-application-to-be-bootloaded"
  },"26": {
    "doc": "Application Configurations",
    "title": "Application Configurations",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application.html",
    "relUrl": "/apps/docs/readme_configure_application.html"
  },"27": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Configuring an application to be bootloaded for CORTEX-M based MCUs",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application_sam.html#configuring-an-application-to-be-bootloaded-for-cortex-m-based-mcus",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#configuring-an-application-to-be-bootloaded-for-cortex-m-based-mcus"
  },"28": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Application settings in MCC system configuration",
    "content": ". | Launch MCC for the application project to be configured | Select system component from the project graph and configure the below highlighted settings . | Disable Fuse Settings: . | Fuse settings needs to be disabled for the application which will be boot-loaded as the fuse settings are supposed to be programmed through programming tool from bootloader code. Also the fuse settings are not programmable through firmware . | Enabling the fuse settings also increases the size of the binary when generated through the hex file . | When updating the bootloader itself, make sure that the fuse settings for the bootloader application are also disabled . | . | Specify the Application Start Address: . | Specify the Start address from where the application will run under the Application Start Address (Hex) option in System block in MCC. | This value should be equal to or greater than the bootloader size and must be aligned to the erase unit size on that device. | As this value will be used by bootloader to Jump to application at device reset it should match the value provided to bootloader code . | The Application Start Address (Hex) will be used to generate XC32 compiler settings to place the code at intended address . | After the project is regenerated, the ROM_ORIGIN and ROM_LENGTH are the XC32 linker variables which will be overridden with value provided for Application Start Address (Hex) and can be verified under Options for xc32-ld in Project Properties in MPLABX IDE as shown below. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application_sam.html#application-settings-in-mcc-system-configuration",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#application-settings-in-mcc-system-configuration"
  },"29": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "MPLAB X Settings",
    "content": ". | Specifying post build option to automatically generate the binary file from hex file once the build is complete . | The generated binary file can directly be copied on to the SD card when using host_app_sdcard host application | The generated binary file will serve as an input to the btl_bin_to_c_array.py to generate a C style array containing HEX data when the host_app_nvm host application is used | . ${MP_CC_DIR}/xc32-objcopy -I ihex -O binary ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.hex ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.bin . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application_sam.html#mplab-x-settings",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#mplab-x-settings"
  },"30": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Additional settings (Optional)",
    "content": ". | RAM_ORIGIN and RAM_LENGTH values should be provided for reserving configured bytes from start of RAM to trigger bootloader from firmware . | Under Project Properties, expand options for xc32-ld and define the values for RAM_ORIGIN and RAM_LENGTH under Additional options . | This is optional and can be ignored if not required . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application_sam.html#additional-settings-optional",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#additional-settings-optional"
  },"31": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Application Configurations for CORTEX-M based MCUs",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_application_sam.html",
    "relUrl": "/apps/docs/readme_configure_application_sam.html"
  },"32": {
    "doc": "Configuring NVM Host applications",
    "title": "Configuring the NVM Host applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_nvm.html#configuring-the-nvm-host-applications",
    "relUrl": "/apps/docs/readme_configure_host_app_nvm.html#configuring-the-nvm-host-applications"
  },"33": {
    "doc": "Configuring NVM Host applications",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the NVM host applications within the repository are . | apps/i2c_bootloader/ | apps/i2c_fail_safe_bootloader/ | apps/i2c_bootloader_wlcsp/ | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_nvm.html#downloading-and-building-the-application",
    "relUrl": "/apps/docs/readme_configure_host_app_nvm.html#downloading-and-building-the-application"
  },"34": {
    "doc": "Configuring NVM Host applications",
    "title": "Generating Hex Image pattern used by NVM Host application",
    "content": "Follow below steps only when existing test_app is rebuilt or any other application is to be bootloaded . | Open the application project to be bootloaded in the IDE . | If existing test application has to be built open test_app/firmware/*.X | . | Build the application project to generate the binary (Do not program the binary) . | Convert the generated binary (.bin file) to a header file containing the image data in a C style array: . | On a Windows machine, open the command prompt and launch the btl_bin_to_c_array.py utility to generate a header file containing the image data in an array . python &lt;harmony3_path&gt;/bootloader/tools/btl_bin_to_c_array.py -b &lt;binary_file&gt; -o &lt;hex_file&gt; -d &lt;device&gt; . | Refer to btl_bin_to_c_array utility for converting the binary to C array in hex format . | . | Add the application hex header file generated in above step to the test app images path of the I2C embedded host application host_app_nvm/firmware/src/test_app_images/ . | Example: . | If the application hex header file generated is for sam_d21_xpro.X project, Name it as image_pattern_hex_sam_d21_xpro.h and place it in above path | . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_nvm.html#generating-hex-image-pattern-used-by-nvm-host-application",
    "relUrl": "/apps/docs/readme_configure_host_app_nvm.html#generating-hex-image-pattern-used-by-nvm-host-application"
  },"35": {
    "doc": "Configuring NVM Host applications",
    "title": "Configuring the NVM Host application",
    "content": "Follow below steps only when Host development kit is different than Target Development Kit . | Open the host_app_nvm/firmware/*.X project in MPLABX IDE . | Open the “user.h” file as shown below: . | Open test_app_images/i2c_target_boards.h to get predefined macros of supported Bootloader Target Devices . | In the “user.h” file specify the Bootloader Target Device used using the predefined macros from test_app_images/i2c_target_boards.h . #define APP_I2C_BOOTLOADER_TARGET_DEVICE SAM_D21_XPRO . | Open test_app_images/i2c_target_config.h to get predefined configuration of supported Bootloader Target Devices . | Navigate to the #if block for the specified Bootloader Target Device and verify the below settings are as expected. | APP_HEX_HEADER_FILE: Relative path to the generated header file containing the application hex image in an array | APP_I2C_SLAVE_ADDR: I2C slave address | APP_ERASE_PAGE_SIZE: Erase page size of the target (target = MCU being programmed) | APP_PROGRAM_PAGE_SIZE: Program page size of the target (target = MCU being programmed). | The macro can either be set to the program page size or can be set to the size of the erase page size of the target. | In the demo example, the macro is set equal to the size of the erase page. | On embedded host where RAM is limited, the macro may be set to the actual program page size to reduce the RAM used to hold the program data. | For example, for SAM D20, the macro can be set either to 64 (program page size) or 256 (erase page size) | . | . | APP_IMAGE_START_ADDR: User application start address (This value should be same as the application start address specified in Application Configurations steps). | If the bootloader itself is being upgraded then the APP_IMAGE_START_ADDR must be set to 0x00 (start of bootloader) | Ensure that the bootloader and application are also configured with the same value of user application start address | . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_nvm.html#configuring-the-nvm-host-application",
    "relUrl": "/apps/docs/readme_configure_host_app_nvm.html#configuring-the-nvm-host-application"
  },"36": {
    "doc": "Configuring NVM Host applications",
    "title": "Configuring NVM Host applications",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_nvm.html",
    "relUrl": "/apps/docs/readme_configure_host_app_nvm.html"
  },"37": {
    "doc": "Configuring SDCARD Host applications",
    "title": "Configuring the SDCARD Host applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_sdcard.html#configuring-the-sdcard-host-applications",
    "relUrl": "/apps/docs/readme_configure_host_app_sdcard.html#configuring-the-sdcard-host-applications"
  },"38": {
    "doc": "Configuring SDCARD Host applications",
    "title": "Downloading the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the SDCARD host applications within the repository is apps/i2c_bootloader/ . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_sdcard.html#downloading-the-application",
    "relUrl": "/apps/docs/readme_configure_host_app_sdcard.html#downloading-the-application"
  },"39": {
    "doc": "Configuring SDCARD Host applications",
    "title": "Configuring the SDCARD Host application",
    "content": "Follow below steps only when Host development kit is different than Target Development Kit . | Open the host_app_sdcard/firmware/*.X project in MPLABX IDE . | Open the “user.h” file as shown below: . | In the “user.h” file specify the Bootloader Target Device used using the predefined macros #define APP_I2C_BOOTLOADER_TARGET_DEVICE SAM_D21_XPRO . | Navigate to the #if block for the specified Bootloader Target Device and verify the below settings are as expected. | APP_BINARY_FILE: Name of the Application binary copied to the SDCARD | APP_I2C_SLAVE_ADDR: I2C slave address | APP_ERASE_PAGE_SIZE: Erase page size of the target (target = MCU being programmed) | APP_PROGRAM_PAGE_SIZE: Program page size of the target (target = MCU being programmed). | The macro can either be set to the program page size or can be set to the size of the erase page size of the target. | In the demo example, the macro is set equal to the size of the erase page. | On embedded host where RAM is limited, the macro may be set to the actual program page size to reduce the RAM used to hold the program data. | For example, for SAM D20, the macro can be set either to 64 (program page size) or 256 (erase page size) | . | . | APP_IMAGE_START_ADDR: User application start address (This value should be same as the application start address specified in Application Configurations steps). | If the bootloader itself is being upgraded then the APP_IMAGE_START_ADDR must be set to 0x00 (start of bootloader) | Ensure that the bootloader and application are also configured with the same value of user application start address | . | . | . Follow below steps only when multiple Target development kit are to be programmed using the same Host development kit . | Open the host application source file . | The APP_BL_NUM_I2C_SLAVES must be set equal to the number of slaves being programmed on the I2C bus . | Specify the following details in the firmwareUpdateInfo data structure for other slaves on the bus: . | i2cSlaveAddr: Specify the I2C slave address | erasePageSize: Specify the erase page size of the target (target = MCU being programmed) | programPageSize: Specify the program page size of the target (target = MCU being programmed). | It can either be set to the program page size or can be set to the size of the erase page size of the target. | In the demo example, it is set equal to the size of the erase page. | On embedded host where RAM is limited, it may be set to the actual program page size to reduce the RAM used to hold the program data. | For example, for SAM D20, the programPageSize can be set either to 64 (program page size) or 256 (erase page size). | . | . | appStartAddr: Specify the user application start address (This value should be same as the application start address specified in Application configuration). | If the bootloader itself is being upgraded then the appStartAddr must be set to 0x00 (start of the bootloader). | Also, ensure that the bootloader is also configured with the same value of application start address. | . | filename: Specify the filename of the application binary | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_sdcard.html#configuring-the-sdcard-host-application",
    "relUrl": "/apps/docs/readme_configure_host_app_sdcard.html#configuring-the-sdcard-host-application"
  },"40": {
    "doc": "Configuring SDCARD Host applications",
    "title": "Configuring SDCARD Host applications",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_app_sdcard.html",
    "relUrl": "/apps/docs/readme_configure_host_app_sdcard.html"
  },"41": {
    "doc": "Host Application Configurations",
    "title": "Configuring a Host Application used to send an application binary to bootloader",
    "content": ". | To configure NVM based host application refer to NVM Host Application Configuration . | To configure SDCARD based host application refer to SDCARD Host Application Configuration . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_application.html#configuring-a-host-application-used-to-send-an-application-binary-to-bootloader",
    "relUrl": "/apps/docs/readme_configure_host_application.html#configuring-a-host-application-used-to-send-an-application-binary-to-bootloader"
  },"42": {
    "doc": "Host Application Configurations",
    "title": "Host Application Configurations",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/docs/readme_configure_host_application.html",
    "relUrl": "/apps/docs/readme_configure_host_application.html"
  },"43": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#building-and-running-the-i2c-bootloader-applications"
  },"44": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32cm_mc00_curiosity_pro.X | MPLABX Project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/pic32cm_mc00_curiosity_pro.X | MPLABX Project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#downloading-and-building-the-application"
  },"45": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "content": ". | PIC32CM MC00 Curiosity Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (PA12) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (PA12) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (PA13) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (PA13) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#setting-up-pic32cm-mc00-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#setting-up-pic32cm-mc00-curiosity-pro-evaluation-kit"
  },"46": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than PIC32CM MC00 Curiosity Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/pic32cm_mc00_curiosity_pro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_pic32cm_mc00_curiosity_pro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#building-and-configuring-i2c-host-applications"
  },"47": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32cm_mc00_curiosity_pro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#running-the-application"
  },"48": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_pic32cm_mc00_curiosity_pro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#additional-steps-optional"
  },"49": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html"
  },"50": {
    "doc": "Building and Running on PIC32MK MCA Curiosity Pro",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#building-and-running-the-i2c-bootloader-applications"
  },"51": {
    "doc": "Building and Running on PIC32MK MCA Curiosity Pro",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mk_mca_curiosity_pro.X | MPLABX Project for PIC32MK MCA Curiosity Pro | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mk_mca_curiosity_pro.X | MPLABX Project for PIC32MK MCA Curiosity Pro | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#downloading-and-building-the-application"
  },"52": {
    "doc": "Building and Running on PIC32MK MCA Curiosity Pro",
    "title": "Setting up PIC32MK MCA Curiosity Pro",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit is used as the Host development kit and PIC32MK MCA Curiosity Pro is used as the Target Development Kit . | Connect the I2C SDA line Pin 11 (SDA2/RA8) on EXT1 of the Target Development Kit to the I2C SDA line Pin 11 (SERCOM7 PAD[0]/PD08) on EXT2 of the Host development kit | Connect the I2C SCL line Pin 12 (SCL2/RB4) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM7 PAD[1]/PD09) on EXT2 of the Host development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#setting-up-pic32mk-mca-curiosity-pro",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#setting-up-pic32mk-mca-curiosity-pro"
  },"53": {
    "doc": "Building and Running on PIC32MK MCA Curiosity Pro",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C SDCARD Host application to send the application binary to Target development kit . If the SDCARD Host Development Kit being used is other than SAM E54 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring SDCARD Host application project . | Open the SDCARD host application project host_app_sdcard/firmware/sam_e54_xpro.X in the IDE . | If a SDCARD host application project of different development kit is used then open that project in the IDE | . | Make sure that the APP_I2C_BOOTLOADER_TARGET_DEVICE macro is set to the target board being programmed . | Build and program the SDCARD host application using the IDE on to the I2C host dvelopment kit . | Open the test application project test_app/firmware/pic32mk_mca_curiosity_pro.X in the IDE | Build the project to generate the binary (Do not program the binary) . | Copy the application binary into the SD card and insert the SD card in the SD card slot available on the SAM E54 Xplained Pro Evaluation Kit . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#building-and-configuring-i2c-host-applications"
  },"54": {
    "doc": "Building and Running on PIC32MK MCA Curiosity Pro",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32mk_mca_curiosity_pro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED1 will be turned-on to indicate that bootloader code is running on the target | LED1 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | If SDCARD Host application was used to program the application binary following message will be displayed on the terminal of Host development kit . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED1 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW200 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#running-the-application"
  },"55": {
    "doc": "Building and Running on PIC32MK MCA Curiosity Pro",
    "title": "Additional Steps (Optional)",
    "content": "Using SDCARD Host application . | If multiple Target development kit are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html#additional-steps-optional"
  },"56": {
    "doc": "Building and Running on PIC32MK MCA Curiosity Pro",
    "title": "Building and Running on PIC32MK MCA Curiosity Pro",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mk_mca_curiosity_pro.html"
  },"57": {
    "doc": "Building and Running on PIC32MM USB Curiosity Pro Development Board",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#building-and-running-the-i2c-bootloader-applications"
  },"58": {
    "doc": "Building and Running on PIC32MM USB Curiosity Pro Development Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mm_usb_curiosity.X | MPLABX Project for PIC32MM USB Curiosity Development Board | . Test Application . | Project Name | Description | . | test_app/firmware/pic32cm_mc00_curiosity_pro.X | MPLABX Project for PIC32MM USB Curiosity Development Board | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#downloading-and-building-the-application"
  },"59": {
    "doc": "Building and Running on PIC32MM USB Curiosity Pro Development Board",
    "title": "Setting up PIC32MM USB Curiosity Development Board",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit is used for Host Development kit | PIC32MM USB Curiosity Development Board is used for Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM7 PAD[0]/PD08) on EXT3 of the Host development kit to the I2C SDA line Pin 14 (RB05) on J12 MicroBus connector of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM7 PAD[1]/PD09) on EXT3 of the Host development kit to the I2C SCL line Pin 13 (RC09) on J12 MicroBus connector of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#setting-up-pic32mm-usb-curiosity-development-board",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#setting-up-pic32mm-usb-curiosity-development-board"
  },"60": {
    "doc": "Building and Running on PIC32MM USB Curiosity Pro Development Board",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C SDCARD Host application to send the application binary to Target development kit . If the SDCARD Host Development Kit being used is other than SAM E54 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring SDCARD Host application project . | Open the SDCARD host application project host_app_sdcard/firmware/sam_e54_xpro.X in the IDE . | If a SDCARD host application project of different development kit is used then open that project in the IDE | . | Build and program the SDCARD host application using the IDE on to the I2C host dvelopment kit . | Open the test application project test_app/firmware/pic32mm_usb_curiosity.X in the IDE | Build the project to generate the binary (Do not program the binary) . | Copy the application binary into the SD card and insert the SD card in the SD card slot available on the SAM E54 Xplained Pro Evaluation Kit . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#building-and-configuring-i2c-host-applications"
  },"61": {
    "doc": "Building and Running on PIC32MM USB Curiosity Pro Development Board",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32mm_usb_curiosity.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED1 will be turned-on to indicate that bootloader code is running on the target | LED1 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED1 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#running-the-application"
  },"62": {
    "doc": "Building and Running on PIC32MM USB Curiosity Pro Development Board",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_pic32mm_usb_curiosity.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html#additional-steps-optional"
  },"63": {
    "doc": "Building and Running on PIC32MM USB Curiosity Pro Development Board",
    "title": "Building and Running on PIC32MM USB Curiosity Pro Development Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_pic32mm_usb_curiosity.html"
  },"64": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"65": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_c21n_xpro.X | MPLABX Project for SAM C21N Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_c21n_xpro.X | MPLABX Project for SAM C21N Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#downloading-and-building-the-application"
  },"66": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Setting up SAM C21N Xplained Pro Evaluation Kit",
    "content": ". | SAM C21N Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM5 PAD[0]/PB16) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM5 PAD[0]/PB16) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM5 PAD[1]/PB17) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM5 PAD[1]/PB17) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#setting-up-sam-c21n-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#setting-up-sam-c21n-xplained-pro-evaluation-kit"
  },"67": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM C21N Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_c21n_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_c21n_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#building-and-configuring-i2c-host-applications"
  },"68": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_c21n_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#running-the-application"
  },"69": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_c21n_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html#additional-steps-optional"
  },"70": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_c21n_xpro.html"
  },"71": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"72": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_d11_xpro.X | MPLABX Project for SAM D11 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_d11_xpro.X | MPLABX Project for SAM D11 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#downloading-and-building-the-application"
  },"73": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM D11 Xplained Pro Evaluation Kit",
    "content": ". | SAM D11 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM1 PAD[0]/PA22) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM1 PAD[0]/PA22) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM1 PAD[1]/PA23) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM1 PAD[1]/PA23) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#setting-up-sam-d11-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#setting-up-sam-d11-xplained-pro-evaluation-kit"
  },"74": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM D11 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_d11_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d11_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#building-and-configuring-i2c-host-applications"
  },"75": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_d11_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#running-the-application"
  },"76": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d11_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html#additional-steps-optional"
  },"77": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d11_xpro.html"
  },"78": {
    "doc": "Building and Running on SAMD20E15BU",
    "title": "Building and Running the I2C WLCSP Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#building-and-running-the-i2c-wlcsp-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#building-and-running-the-i2c-wlcsp-bootloader-applications"
  },"79": {
    "doc": "Building and Running on SAMD20E15BU",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader_wlcsp/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/samd20e15bu_wlcsp.X | MPLABX Project for SAMD20E15BU | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#downloading-and-building-the-application"
  },"80": {
    "doc": "Building and Running on SAMD20E15BU",
    "title": "Setting up SAMD20E15BU",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit is used for the Host Development kit and SAMD20E15BU is used as the target . | Connect the I2C SDA line Pin 11 (SERCOM7 PAD[0]/PD08) on EXT3 of the Host development kit to the I2C SDA line (SERCOM2 PAD[0]/PA08) of the target | Connect the I2C SCL line Pin 12 (SERCOM7 PAD[1]/PD09) on EXT3 of the Host development kit to the I2C SCL line (SERCOM2 PAD[1]/PA09) of the target | Connect a ground wire between the Host development kit and target | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Power up the target board | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#setting-up-samd20e15bu",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#setting-up-samd20e15bu"
  },"81": {
    "doc": "Building and Running on SAMD20E15BU",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C SDCARD Host application to send the application binary to Target development kit . | Open the application project to be programmed on target, in the IDE | To configure the application refer to Application Configurations | Build the project to generate the binary (Do not program the binary) . | Open the SDCARD host application project host_app_sdcard/firmware/sam_e54_xpro.X in the IDE | Build and program the SDCARD host application using the IDE on to the host dvelopment kit . | Copy the application binary into the SD card and rename it to image.bin | Insert the SD card in the SD card slot . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#building-and-configuring-i2c-host-applications"
  },"82": {
    "doc": "Building and Running on SAMD20E15BU",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/samd20e15bu_wlcsp.X in the IDE | Build and program the application using the IDE on to the Target development kit | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#running-the-application"
  },"83": {
    "doc": "Building and Running on SAMD20E15BU",
    "title": "Additional Steps (Optional)",
    "content": "Using SDCARD Host application . | If multiple Target devices are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html#additional-steps-optional"
  },"84": {
    "doc": "Building and Running on SAMD20E15BU",
    "title": "Building and Running on SAMD20E15BU",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e15.html"
  },"85": {
    "doc": "Building and Running on SAMD20E16BU",
    "title": "Building and Running the I2C WLCSP Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#building-and-running-the-i2c-wlcsp-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#building-and-running-the-i2c-wlcsp-bootloader-applications"
  },"86": {
    "doc": "Building and Running on SAMD20E16BU",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader_wlcsp/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/samd20e16bu_wlcsp.X | MPLABX Project for SAMD20E16BU | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#downloading-and-building-the-application"
  },"87": {
    "doc": "Building and Running on SAMD20E16BU",
    "title": "Setting up SAMD20E16BU",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit is used for the Host Development kit and SAMD20E16BU is used as the target . | Connect the I2C SDA line Pin 11 (SERCOM7 PAD[0]/PD08) on EXT3 of the Host development kit to the I2C SDA line (SERCOM2 PAD[0]/PA08) of the target | Connect the I2C SCL line Pin 12 (SERCOM7 PAD[1]/PD09) on EXT3 of the Host development kit to the I2C SCL line (SERCOM2 PAD[1]/PA09) of the target | Connect a ground wire between the Host development kit and target | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Power up the target board | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#setting-up-samd20e16bu",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#setting-up-samd20e16bu"
  },"88": {
    "doc": "Building and Running on SAMD20E16BU",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C SDCARD Host application to send the application binary to Target development kit . | Open the application project to be programmed on target, in the IDE | To configure the application refer to Application Configurations | Build the project to generate the binary (Do not program the binary) . | Open the SDCARD host application project host_app_sdcard/firmware/sam_e54_xpro.X in the IDE | Build and program the SDCARD host application using the IDE on to the host dvelopment kit . | Copy the application binary into the SD card and rename it to image.bin | Insert the SD card in the SD card slot . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#building-and-configuring-i2c-host-applications"
  },"89": {
    "doc": "Building and Running on SAMD20E16BU",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/samd20e16bu_wlcsp.X in the IDE | Build and program the application using the IDE on to the Target development kit | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#running-the-application"
  },"90": {
    "doc": "Building and Running on SAMD20E16BU",
    "title": "Additional Steps (Optional)",
    "content": "Using SDCARD Host application . | If multiple Target devices are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html#additional-steps-optional"
  },"91": {
    "doc": "Building and Running on SAMD20E16BU",
    "title": "Building and Running on SAMD20E16BU",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html",
    "relUrl": "/apps/i2c_bootloader_wlcsp/docs/readme_sam_d20_e16.html"
  },"92": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"93": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_d20_xpro.X | MPLABX Project for SAM D20 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_d20_xpro.X | MPLABX Project for SAM D20 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#downloading-and-building-the-application"
  },"94": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM D20 Xplained Pro Evaluation Kit",
    "content": ". | SAM D20 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#setting-up-sam-d20-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#setting-up-sam-d20-xplained-pro-evaluation-kit"
  },"95": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM D20 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_d20_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d20_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#building-and-configuring-i2c-host-applications"
  },"96": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_d20_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#running-the-application"
  },"97": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d20_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html#additional-steps-optional"
  },"98": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d20_xpro.html"
  },"99": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"100": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#downloading-and-building-the-application"
  },"101": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM D21 Xplained Pro Evaluation Kit",
    "content": ". | SAM D21 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#setting-up-sam-d21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#setting-up-sam-d21-xplained-pro-evaluation-kit"
  },"102": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM D21 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_d21_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d21_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . Using I2C SDCARD Host application to send the application binary to Target development kit . If the SDCARD Host Development Kit being used is other than SAM D21 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring SDCARD Host application project . | Connect IO1 Xplained Pro Extension Kit to the EXT2 header of SAM D21 Xplained Pro Evaluation Kit . | Open the SDCARD host application project host_app_sdcard/firmware/sam_d21_xpro.X in the IDE . | If a SDCARD host application project of different development kit is used then open that project in the IDE | . | Build and program the SDCARD host application using the IDE on to the I2C host dvelopment kit . | Open the test application project test_app/firmware/sam_d21_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) . | Copy the application binary into the SD card and insert the SD card in the SD card slot available on the IO1 Xplained Pro Extension Kit . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#building-and-configuring-i2c-host-applications"
  },"103": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_d21_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | If SDCARD Host application was used to program the application binary following message will be displayed on the terminal of Host development kit . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#running-the-application"
  },"104": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_d21_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . Using SDCARD Host application . | If multiple Target development kit are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html#additional-steps-optional"
  },"105": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_d21_xpro.html"
  },"106": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"107": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_da1_xpro.X | MPLABX Project for SAM DA1 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_da1_xpro.X | MPLABX Project for SAM DA1 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#downloading-and-building-the-application"
  },"108": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM DA1 Xplained Pro Evaluation Kit",
    "content": ". | SAM DA1 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#setting-up-sam-da1-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#setting-up-sam-da1-xplained-pro-evaluation-kit"
  },"109": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM DA1 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_da1_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_da1_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#building-and-configuring-i2c-host-applications"
  },"110": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_da1_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#running-the-application"
  },"111": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_da1_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html#additional-steps-optional"
  },"112": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_da1_xpro.html"
  },"113": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"114": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application"
  },"115": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM E54 Xplained Pro Evaluation Kit",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM7 PAD[0]/PD08) on EXT3 of the Host development kit to the I2C SDA line Pin 11 (SERCOM3 PAD[0]/PA22) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM7 PAD[1]/PD09) on EXT3 of the Host development kit to the I2C SCL line Pin 12 (SERCOM3 PAD[1]/PA23) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit"
  },"116": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM E54 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_e54_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . Using I2C SDCARD Host application to send the application binary to Target development kit . If the SDCARD Host Development Kit being used is other than SAM E54 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring SDCARD Host application project . | Open the SDCARD host application project host_app_sdcard/firmware/sam_e54_xpro.X in the IDE . | If a SDCARD host application project of different development kit is used then open that project in the IDE | . | Build and program the SDCARD host application using the IDE on to the I2C host dvelopment kit . | Open the test application project test_app/firmware/sam_e54_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) . | Copy the application binary into the SD card and insert the SD card in the SD card slot available on the SAM E54 Xplained Pro Evaluation Kit . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#building-and-configuring-i2c-host-applications"
  },"117": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_e54_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | If SDCARD Host application was used to program the application binary following message will be displayed on the terminal of Host development kit . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#running-the-application"
  },"118": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . Using SDCARD Host application . | If multiple Target development kit are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional"
  },"119": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e54_xpro.html"
  },"120": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Fail Safe Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-i2c-fail-safe-bootloader-applications",
    "relUrl": "/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-i2c-fail-safe-bootloader-applications"
  },"121": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_fail_safe_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application"
  },"122": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM E54 Xplained Pro Evaluation Kit",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM7 PAD[0]/PD08) on EXT3 of the Host development kit to the I2C SDA line Pin 11 (SERCOM3 PAD[0]/PA22) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM7 PAD[1]/PD09) on EXT3 of the Host development kit to the I2C SCL line Pin 12 (SERCOM3 PAD[1]/PA23) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit"
  },"123": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_e54_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | Open the NVM host application project host_app_nvm/firmware/sam_e54_xpro.X in the IDE . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt combined bootloader and application HEX header file host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro_bootloader_app_merged.h will be programmed to the Target Development kit . | This must be programmed once to program both bootloader and application into the inactive flash bank . | . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | LED0 on the Target development kit should start blinking and you should see below output on the console . | The NVM Flash Bank Can be BANK A or BANK B based on from where the test application is running | . | . | Press and hold the Switch SW0 on the Target development kit to trigger Bootloader from test application . | This is to program the application binary in other bank and you should see below output | . | To program the prebuilt application image host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h to the inactive bank of Target Development kit, Open the “user.h” file of the NVM host application project host_app_nvm/firmware/sam_e54_xpro.X as shown below: . | In the “user.h” file update the APP_HEX_HEADER_FILE and APP_IMAGE_START_ADDR values as mentioned below . #define APP_HEX_HEADER_FILE \"test_app_images/image_pattern_hex_sam_e54_xpro.h\" #define APP_IMAGE_START_ADDR 0x82000UL . | APP_HEX_HEADER_FILE: Relative path to the generated header file containing the application hex image in an array | APP_I2C_SLAVE_ADDR: I2C slave address | APP_ERASE_PAGE_SIZE: Erase page size of the target (target = MCU being programmed) | APP_PROGRAM_PAGE_SIZE: Program page size of the target (target = MCU being programmed). | The macro can either be set to the program page size or can be set to the size of the erase page size of the target. | In the demo example, the macro is set equal to the size of the erase page. | On embedded host where RAM is limited, the macro may be set to the actual program page size to reduce the RAM used to hold the program data. | . | APP_IMAGE_START_ADDR: User application start address . | It must be set to 0x80000UL when programming the combined bootloader and application binary to the inactive bank | It must be set to 0x82000UL when programming the application binary only to the inactive bank | . | . | Build and program the NVM host application using the IDE on to the Host development kit . | On the Target Development Kit (the board being programmed), press and hold the Switch SW0 and then press Reset button or Power cycle to force trigger bootloader at startup . | LED0 will be turned-on to indicate that bootloader code is running on the target | . | Press Reset button on the Host development kit to program the application binary | Repeat Steps 7-8 once . | You should see other Bank in console displayed compared to first run | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#running-the-application"
  },"124": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Generating Hex Image pattern for an application to be bootloaded . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h refer to Application Configurations . | Build the application project to generate the binary (Do not program the binary) . | Convert the generated binary (.bin file) to a header file containing the image data in a C style array: . | On a Windows machine, open the command prompt and run the btl_bin_to_c_array utility to generate a header file containing the image data in an array | . | . python &lt;harmony3_path&gt;/bootloader/tools/btl_bin_to_c_array_gen.py -b &lt;binary_file&gt; -o &lt;harmony3_path&gt;/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro.h -d same5x . | Once done repeat the applicable steps mentioned in Running The Application | . Generating Hex Image pattern for Commbined Bootloader and Application Binary . | Launch MCC for the bootloader project bootloader/firmware/sam_e54_xpro.X | Select system component from the project graph and disable fuse settings . | Disable Fuse Settings: . | Fuse settings needs to be disabled for the bootloader which will be boot-loaded as the fuse settings are supposed to be programmed through programming tool | Also the fuse settings are not programmable through firmware | Enabling the fuse settings also increases the size of the binary when generated through the hex file | . | Regenrate the project . | Specifing post build option to automatically generate the binary file from hex file once the build is complete . ${MP_CC_DIR}/xc32-objcopy -I ihex -O binary ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.hex ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.bin . | Build the bootloader project to generate the bootloader binary (Do not program the binary) . | Build the sample application test_app (or any other application configured to bootload) using IDE to generate the application binary (Do not program the binary) . | On a Windows machine, open the command prompt . | Run the btl_app_merge_bin.py utiliy from command prompt to merge the generated Bootloader binary and test application binary. Below output should be displayed on command prompt | . python &lt;harmony3_path&gt;/bootloader/tools/btl_app_merge_bin.py -o 0x2000 -b &lt;harmony3_path&gt;/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin -a &lt;harmony3_path&gt;/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/test_app/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . | Run btl_bin_to_c_array utility to convert the generated merged binary btl_app_merged.bin to a header file containing the image data in a C style array . | The merged binary will be created in the directory from where the script was called | . | . python &lt;harmony3_path&gt;/bootloader/tools/btl_bin_to_c_array.py -b &lt;Path_to_merged_binary&gt;/btl_app_merged.bin -o &lt;harmony3_path&gt;/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e54_xpro_bootloader_app_merged.h -d same5x . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional"
  },"125": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/i2c_fail_safe_bootloader/docs/readme_sam_e54_xpro.html"
  },"126": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Running the TWI Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#building-and-running-the-twi-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#building-and-running-the-twi-bootloader-applications"
  },"127": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#downloading-and-building-the-application"
  },"128": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Setting up SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". | SAM E70 Xplained Ultra Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the TWI SDA line Pin 06 (PA03) on MikroBUS Header of the Host development kit to the TWI SDA line Pin 06 (PA03) on MikroBUS Header of the Target development kit | Connect the TWI SCL line Pin 05 (PA04) on MikroBUS Header of the Host development kit to the TWI SCL line Pin 05 (PA04) on MikroBUS Header of the Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#setting-up-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#setting-up-sam-e70-xplained-ultra-evaluation-kit"
  },"129": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Configuring TWI Host Applications",
    "content": "Using TWI NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM E70 Xplained Ultra Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_e70_xult.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e70_xult.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . Using I2C SDCARD Host application to send the application binary to Target development kit . If the SDCARD Host Development Kit being used is other than SAM E70 Xplained Ultra Evaluation Kit then follow the steps mentioned in Configuring SDCARD Host application project . | Open the SDCARD host application project host_app_sdcard/firmware/sam_e70_xult.X in the IDE . | If a SDCARD host application project of different development kit is used then open that project in the IDE | . | Build and program the SDCARD host application using the IDE on to the I2C host dvelopment kit . | Open the test application project test_app/firmware/sam_e70_xult.X in the IDE | Build the project to generate the binary (Do not program the binary) . | Copy the application binary into the SD card and insert the SD card in the SD card slot available on the SAM E70 Xplained Ultra Evaluation Kit . | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings for Host Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#building-and-configuring-twi-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#building-and-configuring-twi-host-applications"
  },"130": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_e70_xult.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED3 will be turned-on to indicate that bootloader code is running on the target | LED3 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED3 will turn off and LED2 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED2 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#running-the-application"
  },"131": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_e70_xult.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . Using SDCARD Host application . | If multiple Target development kit are to be programmed using the same Host development kit then refer to Configuring SDCARD Host application project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e70_xult.html#additional-steps-optional"
  },"132": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_e70_xult.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_e70_xult.html"
  },"133": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"134": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_ha1_xpro.X | MPLABX Project for SAM HA1G16A Xplained Pro | . Test Application . | Project Name | Description | . | test_app/firmware/sam_ha1_xpro.X | MPLABX Project for SAM HA1G16A Xplained Pro | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#downloading-and-building-the-application"
  },"135": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Setting up SAM HA1G16A Xplained Pro",
    "content": ". | SAM HA1G16A Xplained Pro is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . Note . | ATSAMHA1G16A device in SAM HA1G16A Xplained Pro board is not recommended for new design, hence replace the device with ATSAMHA1G16AB device | Connect the supported external debugger to Cortex Debug Port | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#setting-up-sam-ha1g16a-xplained-pro",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#setting-up-sam-ha1g16a-xplained-pro"
  },"136": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM HA1G16A Xplained Pro then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_ha1_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_ha1_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#building-and-configuring-i2c-host-applications"
  },"137": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_ha1_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#running-the-application"
  },"138": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_ha1_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html#additional-steps-optional"
  },"139": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Building and Running on SAM HA1G16A Xplained Pro",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_ha1_xpro.html"
  },"140": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"141": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_l10_xpro.X | MPLABX Project for SAM L10 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_l10_xpro.X | MPLABX Project for SAM L10 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#downloading-and-building-the-application"
  },"142": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM L10 Xplained Pro Evaluation Kit",
    "content": ". | SAM L10 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM1 PAD[0]/PA16) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM1 PAD[0]/PA16) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM1 PAD[1]/PA17) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM1 PAD[1]/PA17) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#setting-up-sam-l10-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#setting-up-sam-l10-xplained-pro-evaluation-kit"
  },"143": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM L10 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_l10_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l10_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#building-and-configuring-i2c-host-applications"
  },"144": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_l10_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#running-the-application"
  },"145": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l10_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html#additional-steps-optional"
  },"146": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l10_xpro.html"
  },"147": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"148": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_l21_xpro.X | MPLABX Project for SAM L21 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_l21_xpro.X | MPLABX Project for SAM L21 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#downloading-and-building-the-application"
  },"149": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM L21 Xplained Pro Evaluation Kit",
    "content": ". | SAM L21 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM2 PAD[0]/PA08) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM2 PAD[1]/PA09) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#setting-up-sam-l21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#setting-up-sam-l21-xplained-pro-evaluation-kit"
  },"150": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM L21 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_l21_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l21_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#building-and-configuring-i2c-host-applications"
  },"151": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_l21_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#running-the-application"
  },"152": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l21_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html#additional-steps-optional"
  },"153": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l21_xpro.html"
  },"154": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#building-and-running-the-i2c-bootloader-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#building-and-running-the-i2c-bootloader-applications"
  },"155": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_l22_xpro.X | MPLABX Project for SAM L22 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_l22_xpro.X | MPLABX Project for SAM L22 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#downloading-and-building-the-application"
  },"156": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM L22 Xplained Pro Evaluation Kit",
    "content": ". | SAM L22 Xplained Pro Evaluation Kit is used for both Host Development kit and Target Development kit . | Connect the I2C SDA line Pin 11 (SERCOM5 PAD[0]/PB30) on EXT1 of the Host development kit to the I2C SDA line Pin 11 (SERCOM5 PAD[0]/PB30) on EXT1 of the Target development kit | Connect the I2C SCL line Pin 12 (SERCOM5 PAD[1]/PB31) on EXT1 of the Host development kit to the I2C SCL line Pin 12 (SERCOM5 PAD[1]/PB31) on EXT1 of the Target development kit | Connect a ground wire between the Host development kit and Target development kit | Connect the Debug USB port on the Host development kit to the computer using a micro USB cable | Connect the Debug USB port on the Target development kit to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#setting-up-sam-l22-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#setting-up-sam-l22-xplained-pro-evaluation-kit"
  },"157": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Building and Configuring I2C Host Applications",
    "content": "Using I2C NVM Host application to send the application binary to Target development kit . If the NVM Host Development Kit being used is other than SAM L22 Xplained Pro Evaluation Kit then follow the steps mentioned in Configuring NVM Host application project . | Open the NVM host application project host_app_nvm/firmware/sam_l22_xpro.X in the IDE . | If a NVM host application project of different development kit is used then open that project in the IDE | . | Build and program the NVM host application using the IDE on to the Host development kit . | The prebuilt test application image available under host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l22_xpro.h will be programmed on to the Target development kit with default host_app_nvm project configuration | . | Jump to Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#building-and-configuring-i2c-host-applications",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#building-and-configuring-i2c-host-applications"
  },"158": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_l22_xpro.X in the IDE | Build and program the application using the IDE on to the Target development kit . | LED0 will be turned-on to indicate that bootloader code is running on the target | LED0 will also turn on when the bootloader does not find a valid application; i.e. the first word of the application (stack pointer), contains 0xFFFFFFFF | . | If the test application is being programmed, Open the Terminal application (Ex.:Tera Term) on the computer and configure the serial port settings for Target Development kit as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Press the Switch SW0 on the Host development kit to trigger programming of the application binary | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success . | The target development kit will be reset. Upon re-start, the boot-loader will jump to the user application . | If the test application is programmed then LED0 should start blinking and you should see below output on the Target development kit console . | . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Press Reset button on the Host development kit to reprogram the application binary | Repeat Steps 4-5 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 6 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#running-the-application"
  },"159": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": "Using I2C NVM Host application . | To bootload any application other than host_app_nvm/firmware/src/test_app_images/image_pattern_hex_sam_l22_xpro.h refer to Application Configurations . | Once the application is configured, Refer to Configuring NVM Host application project for setting up the host_app_nvm project . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html#additional-steps-optional"
  },"160": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html",
    "relUrl": "/apps/i2c_bootloader/docs/readme_sam_l22_xpro.html"
  },"161": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_i2c/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"162": {
    "doc": "Release notes",
    "title": "I2C Bootloader Applications Release v3.2.0",
    "content": "New Features . | This release includes support of . | I2C Bootloader Applications for PIC32M and SAM E70/S70/V70/V71 family of 32-bit microcontrollers. | . | . Development kit and demo application support . | The following table provides bootloader demo applications available for different development kits. | Product Family | Development Kits | I2C | I2C Fail Safe | . | SAM D09/D10/D11 | SAM D11 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D20 | SAM D20 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM D21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM DA1 Xplained Pro Evaluation Kit | Yes | NA | . | SAM HA1 | SAM HA1G16A Xplained Pro | Yes | NA | . | SAM C20/C21 | SAM C21N Xplained Pro Evaluation Kit | Yes | NA | . | SAM L21 | SAM L21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L22 | SAM L22 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L10/L11 | SAM L10 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D5x/E5x | SAM E54 Xplained Pro Evaluation Kit | Yes | Yes | . | PIC32CM MC | PIC32CM MC00 Curiosity Pro Evaluation Kit | Yes | NA | . | PIC32MK MC | PIC32MK MCA Curiosity Pro | Yes | NA | . | SAM E70/S70/V70/V71 | SAME70 Xplained Ultra Evaluation Kit | Yes | NA | . | NA: Lack of product capability . | The following WLCSP devices are shipped with preprogrammed bootloader . | Part Number | I2C | . | SAMD20 (ATSAMD20E15BU) | Yes | . | SAMD20 (ATSAMD20E16BU) | Yes | . | . Known Issues . | No changes from v3.0.0 | . Development Tools . | MPLAB® X IDE v6.00 | MPLAB® XC32 C/C++ Compiler v4.10 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.1.17 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/release_notes.html#i2c-bootloader-applications-release-v320",
    "relUrl": "/release_notes.html#i2c-bootloader-applications-release-v320"
  },"163": {
    "doc": "Release notes",
    "title": "I2C Bootloader Applications Release v3.1.0",
    "content": "New Features . | This release includes support of . | I2C Bootloader Applications for PIC32CM MC family of 32-bit microcontrollers. | . | . Development kit and demo application support . | The following table provides bootloader demo applications available for different development kits. | Product Family | Development Kits | I2C | I2C Fail Safe | . | SAM D09/D10/D11 | SAM D11 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D20 | SAM D20 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM D21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM DA1 Xplained Pro Evaluation Kit | Yes | NA | . | SAM HA1 | SAM HA1G16A Xplained Pro | Yes | NA | . | SAM C20/C21 | SAM C21N Xplained Pro Evaluation Kit | Yes | NA | . | SAM L21 | SAM L21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L22 | SAM L22 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L10/L11 | SAM L10 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D5x/E5x | SAM E54 Xplained Pro Evaluation Kit | Yes | Yes | . | PIC32CM MC | PIC32CM MC00 Curiosity Pro Evaluation Kit | Yes | NA | . | NA: Lack of product capability . | The following WLCSP devices are shipped with preprogrammed bootloader . | Part Number | I2C | . | SAMD20 (ATSAMD20E15BU) | Yes | . | SAMD20 (ATSAMD20E16BU) | Yes | . | . Known Issues . | No changes from v3.0.0 | . Development Tools . | MPLAB® X IDE v5.50 | MPLAB® XC32 C/C++ Compiler v3.00 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony 3 Launcher v3.6.4 and above. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/release_notes.html#i2c-bootloader-applications-release-v310",
    "relUrl": "/release_notes.html#i2c-bootloader-applications-release-v310"
  },"164": {
    "doc": "Release notes",
    "title": "I2C Bootloader Applications Release v3.0.2",
    "content": ". | Added discover.microchip.com metadata | . Known Issues . | No changes from v3.0.0 | . Development Tools . | No changes from v3.0.0 | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/release_notes.html#i2c-bootloader-applications-release-v302",
    "relUrl": "/release_notes.html#i2c-bootloader-applications-release-v302"
  },"165": {
    "doc": "Release notes",
    "title": "I2C Bootloader Applications Release v3.0.1",
    "content": ". | Updated package.xml | . Known Issues . | No changes from v3.0.0 | . Development Tools . | No changes from v3.0.0 | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/release_notes.html#i2c-bootloader-applications-release-v301",
    "relUrl": "/release_notes.html#i2c-bootloader-applications-release-v301"
  },"166": {
    "doc": "Release notes",
    "title": "I2C Bootloader Applications Release v3.0.0",
    "content": "New Features . | This release includes support of . | I2C Bootloader Applications for Cortex-M0+ and Cortex-M4 based SAM family of 32-bit microcontrollers. | I2C Fail Safe Bootloader for devices with dual flash bank support. | Preprogrammed I2C Bootloader applications for WLCSP devices | . | . Development kit and demo application support . | The following table provides bootloader demo applications available for different development kits. | Product Family | Development Kits | I2C | I2C Fail Safe | . | SAM D09/D10/D11 | SAM D11 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D20 | SAM D20 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM D21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM DA1 Xplained Pro Evaluation Kit | Yes | NA | . | SAM HA1 | SAM HA1G16A Xplained Pro | Yes | NA | . | SAM C20/C21 | SAM C21N Xplained Pro Evaluation Kit | Yes | NA | . | SAM L21 | SAM L21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L22 | SAM L22 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L10/L11 | SAM L10 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D5x/E5x | SAM E54 Xplained Pro Evaluation Kit | Yes | Yes | . | NA: Lack of product capability . | The following WLCSP devices are shipped with preprogrammed bootloader . | Part Number | I2C | . | SAMD20 (ATSAMD20E15BU) | Yes | . | SAMD20 (ATSAMD20E16BU) | Yes | . | . Known Issues . The current known issues are as follows: . | Initialized global variables will not be initialized at startup for I2C bootloaders. | . Development Tools . | MPLAB® X IDE v5.40 | MPLAB® XC32 C/C++ Compiler v2.41 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.5.0 and above. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_i2c/release_notes.html#i2c-bootloader-applications-release-v300",
    "relUrl": "/release_notes.html#i2c-bootloader-applications-release-v300"
  },"167": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_i2c/release_notes.html",
    "relUrl": "/release_notes.html"
  },"168": {
    "doc": "I2C Bootloader Applications",
    "title": "I2C Bootloader Applications",
    "content": "![Microchip logo](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_logo.png) # MPLAB® Harmony 3 I2C Bootloader Application Examples MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 I2C Bootloader application examples - [Release Notes](/bootloader_apps_i2c/release_notes.html) - [MPLAB® Harmony License](/bootloader_apps_i2c/mplab_harmony_license.html) To clone or download these application from Github,go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_i2c) and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following [these instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki) ## Contents Summary | Folder | Description | --- | --- | apps | I2C Bootloader example applications | docs | Applications help documentation | ## Bootloader Examples The following applications are provided to demonstrate the I2C bootloader | Name | Description | --------- | ----------- | [I2C Bootloader](/bootloader_apps_i2c/apps/i2c_bootloader/readme.html) | This example application shows how to use the Bootloader Library to bootload an application using I2C protocol | [I2C Faile Safe Bootloader](/bootloader_apps_i2c/apps/i2c_fail_safe_bootloader/readme.html) | This example application shows how to use the Bootloader Library to bootload an application on device having dual flash bank feature using I2C protocol | [I2C WLCSP Bootloader](/bootloader_apps_i2c/apps/i2c_bootloader_wlcsp/readme.html) | This example application shows how to use the Bootloader Library to bootload an application on WLCSP device using I2C protocol | ## Bootloader Library Refer to [Bootloader Library Help](https://microchip-mplab-harmony.github.io/bootloader) for understanding - Bootloader framework - How the Bootloader library works - Bootloader library configurations - Bootloader memory layout ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_i2c/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/bootloader_apps_i2c.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_i2c/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/bootloader_apps_i2c.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_i2c/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/bootloader_apps_i2c.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_i2c/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/bootloader_apps_i2c.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/bootloader_apps_i2c.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/bootloader_apps_i2c.svg?style=social)]() ",
    "url": "http://localhost:4000/bootloader_apps_i2c/",
    "relUrl": "/"
  }
}
